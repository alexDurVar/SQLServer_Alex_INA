------------------------------------------------------------------------------------------------------------------------------------------------
--PROCEDIMIENTO ALMACENADOS


--Insertar un nuevo programa
CREATE OR ALTER PROCEDURE GUARDAR_PROGRAMA(@ID_PROGRAMA INT OUT, 
										  @NOMBRE_P VARCHAR(50),
										  @MSJ VARCHAR(50) OUT)
AS
	BEGIN
		INSERT INTO PROGRAMAS(ID_PROGRAMA,NOMBRE_PROGRAMA)
		VALUES (@ID_PROGRAMA,@NOMBRE_P)
	
		SET @MSJ = 'PROGRAMA INGRESADO SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @ID_PROGRAMA INT
DECLARE @NOMBRE_P VARCHAR(50)
DECLARE @MSJ VARCHAR(50)

SET @ID_PROGRAMA= 404
SET @NOMBRE_P= 'Desarrollo de Software'

EXECUTE @RC= [DBO].[GUARDAR_PROGRAMA]
@ID_PROGRAMA OUTPUT,
@NOMBRE_P,
@MSJ OUTPUT

PRINT 'EL codigo del nuevo programa es ' + CAST(@ID_PROGRAMA AS VARCHAR)
PRINT @MSJ
GO
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un programa
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_PROGRAMA(@ID_P INT OUT, 
										  @NOMBRE_PROGRAMA VARCHAR(50),
										  @MSJE VARCHAR(50) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID_P))
		BEGIN
			INSERT INTO PROGRAMAS(ID_PROGRAMA,NOMBRE_PROGRAMA) VALUES
			(@ID_P,@NOMBRE_PROGRAMA)
			
			SET @MSJE = 'PROGRAMA INSERTADO SATISFACTORIAMENTE'
			PRINT 'EL codigo del nuevo programa es ' + CAST(@ID_P AS VARCHAR)
		END
	ELSE 
		BEGIN
			UPDATE PROGRAMAS 
			SET ID_PROGRAMA= @ID_P, NOMBRE_PROGRAMA= @NOMBRE_PROGRAMA
			WHERE ID_PROGRAMA= @ID_P

			SET @MSJE = 'PROGRAMA ACTUALIZADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJE=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @ID_P INT
DECLARE @NOMBRE_PROGRAMA VARCHAR(50)
DECLARE @MSJE VARCHAR(50)

SET @ID_P= 404
SET @NOMBRE_PROGRAMA= 'Desarrollo de Software Empresarial'

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_PROGRAMA]
@ID_P OUTPUT,
@NOMBRE_PROGRAMA,
@MSJE OUTPUT


PRINT @MSJE
GO
-----
SELECT* FROM PROGRAMAS
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un programa
CREATE OR ALTER PROCEDURE BORRAR_PROGRAMA(@ID_P INT OUT, 
										  @MSJE VARCHAR(50) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID_P))
				BEGIN
					DELETE FROM PROGRAMAS 
					WHERE ID_PROGRAMA= @ID_P

					SET @MSJE = 'PROGRAMA BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJE=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @ID_P INT
DECLARE @MSJE VARCHAR(50)

SET @ID_P= 404


EXECUTE @RC= [DBO].[BORRAR_PROGRAMA]
@ID_P OUTPUT,
@MSJE OUTPUT

PRINT 'EL codigo del programa borrado es ' + CAST(@ID_P AS VARCHAR)
PRINT @MSJE
GO

SELECT *FROM PROGRAMAS
-----------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los programas de la universidad y los codigos
CREATE OR ALTER PROCEDURE PROGRAMAS_UNIVERSIDAD
AS
BEGIN
	SELECT ID_PROGRAMA, NOMBRE_PROGRAMA
	FROM PROGRAMAS
END
EXECUTE [dbo].[PROGRAMAS_UNIVERSIDAD]

-----------------------------------------------------------------------------------------------------------------------------------------------

--Insertar un nuevo curso
CREATE OR ALTER PROCEDURE GUARDAR_CURSO(@ID_PROGRAMA INT , 
										  @CODIGO_C VARCHAR(20) OUT,
										  @NOMBRE_C VARCHAR(40),
										  @DURACION_H INT,
										  @COSTO INT,
										  @MSJ VARCHAR(50) OUT)
AS
	BEGIN
		INSERT INTO CURSOS(ID_PROGRAMA,CODIGO_CURSO,NOMBRE_CURSO,DURACION_HORAS,COSTO)
		VALUES (@ID_PROGRAMA,@CODIGO_C,@NOMBRE_C,@DURACION_H,@COSTO)
	
		SET @MSJ = 'CURSO INGRESADO SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @ID_PROGRAMA INT
DECLARE @CODIGO_C VARCHAR(20)
DECLARE @NOMBRE_C VARCHAR(40)
DECLARE @DURACION_H INT
DECLARE @COSTO INT
DECLARE @MSJ VARCHAR(50)

SET @ID_PROGRAMA= 404
SET @CODIGO_C= '13Ñ13'
SET @NOMBRE_C= 'ALGEBRA'
SET @DURACION_H= 190
SET @COSTO= 185000

EXECUTE @RC= [DBO].[GUARDAR_CURSO]
@ID_PROGRAMA,
@CODIGO_C OUTPUT,
@NOMBRE_C,
@DURACION_H,
@COSTO,
@MSJ OUTPUT

PRINT 'EL codigo del nuevo curso es ' + CAST(@CODIGO_C AS VARCHAR)
PRINT @MSJ
GO
SELECT * FROM CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Actualizar o insertar un nuevo curso
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_CURSO(@ID_PROGRAMA INT , 
										  @CODIGO_C VARCHAR(20) OUT,
										  @NOMBRE_C VARCHAR(40),
										  @DURACION_H INT,
										  @COSTO INT,
										  @MSJ VARCHAR(50) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM CURSOS WHERE CODIGO_CURSO=@CODIGO_C))
				BEGIN
					INSERT INTO CURSOS(ID_PROGRAMA,CODIGO_CURSO,NOMBRE_CURSO,DURACION_HORAS,COSTO)
					VALUES (@ID_PROGRAMA,@CODIGO_C,@NOMBRE_C,@DURACION_H,@COSTO)
	
					SET @MSJ = 'CURSO INSERTADO SATISFACTORIAMENTE'
					PRINT 'El codigo del nuevo curso es ' + CAST(@CODIGO_C AS VARCHAR) 
				END
			ELSE
				BEGIN
					UPDATE CURSOS
					SET ID_PROGRAMA= @ID_PROGRAMA,CODIGO_CURSO=@CODIGO_C,NOMBRE_CURSO=@NOMBRE_C,DURACION_HORAS=@DURACION_H,COSTO=@COSTO
					WHERE CODIGO_CURSO= @CODIGO_C 
					SET @MSJ= 'CURSO ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

GO
DECLARE @RC INT
DECLARE @ID_PROGRAMA INT
DECLARE @CODIGO_C VARCHAR(20)
DECLARE @NOMBRE_C VARCHAR(40)
DECLARE @DURACION_H INT
DECLARE @COSTO INT
DECLARE @MSJ VARCHAR(50)

SET @ID_PROGRAMA= 404
SET @CODIGO_C= '13Ñ13'
SET @NOMBRE_C= 'ANALISIS MATEMATICO'
SET @DURACION_H= 200
SET @COSTO= 250000

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_CURSO]
@ID_PROGRAMA,
@CODIGO_C OUTPUT,
@NOMBRE_C,
@DURACION_H,
@COSTO,
@MSJ OUTPUT

PRINT @MSJ
GO
SELECT *FROM CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un curso
CREATE OR ALTER PROCEDURE BORRAR_CURSO(@CODIGO_C VARCHAR(20) OUT,
									   @MSJ VARCHAR(50) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM CURSOS WHERE CODIGO_CURSO=@CODIGO_C))
				BEGIN
					DELETE FROM CURSOS
					WHERE  CODIGO_CURSO= @CODIGO_C

					SET @MSJ = 'CURSO BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @CODIGO_C VARCHAR(20)
DECLARE @MSJ VARCHAR(50)

SET @CODIGO_C= '13Ñ13'


EXECUTE @RC= [DBO].[BORRAR_CURSO]
@CODIGO_C OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT *FROM CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los cursos y los profesores que pueden impartirlos
CREATE OR ALTER PROCEDURE CURSOS_COSTO
AS
	BEGIN
	SELECT CURSOS.CODIGO_CURSO,NOMBRE_CURSO,PROFESORES.ID_PROFESOR,NOMBRE,APELLIDO1,APELLIDO1,NOMBRE_CERTIFICACION
	FROM CURSOS LEFT JOIN CERTIFICACIONES_PROFESORES
	ON CURSOS.CODIGO_CURSO=CERTIFICACIONES_PROFESORES.CODIGO_CURSO INNER JOIN PROFESORES
	ON CERTIFICACIONES_PROFESORES.ID_PROFESOR= PROFESORES.ID_PROFESOR
	END
EXECUTE [DBO].[CURSOS_COSTO]

		
------------------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM PROFESORES
--INSERTAR UN PROFESOR NUEVO
CREATE OR ALTER PROCEDURE INSERTAR_PROFESOR(@ID_PROFESOR VARCHAR(20) OUT,
											@NOMBRE VARCHAR(20),
											@APELLIDO1 VARCHAR(20),
											@APELLIDO2 VARCHAR(20),
											@PROVINCIA VARCHAR(30),
											@DISTRITO VARCHAR(40),
											@RESIDENCIA VARCHAR(200),
											@TELEFONO INT,
											@MSJ VARCHAR(100) OUT)
AS 
	BEGIN 
		INSERT INTO PROFESORES 
		VALUES (@ID_PROFESOR,@NOMBRE,@APELLIDO1,@APELLIDO2,@PROVINCIA,@DISTRITO,@RESIDENCIA,@TELEFONO)
		SET @MSJ = 'PROFESOR INGRESADO SATISFACTORIAMENTE'
	END
GO

DECLARE @RC INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NOMBRE VARCHAR(20)
DECLARE @APELLIDO1 VARCHAR(20)
DECLARE @APELLIDO2 VARCHAR(20)
DECLARE @PROVINCIA VARCHAR(30)
DECLARE @DISTRITO VARCHAR(40)
DECLARE @RESIDENCIA VARCHAR(200)
DECLARE @TELEFONO INT
DECLARE @MSJ VARCHAR(100)

SET @ID_PROFESOR= 118070444
SET @NOMBRE= 'JERONIMO'
SET @APELLIDO1= 'VARELA'
SET @APELLIDO2= 'ALVARADO'
SET @PROVINCIA= 'SAN JOSE'
SET @DISTRITO= 'GUADALUPE'
SET @RESIDENCIA= '240M norte del parque de Guadalupe'
SET @TELEFONO= 88997656

EXECUTE @RC= [DBO].[INSERTAR_PROFESOR]
@ID_PROFESOR OUTPUT,
@NOMBRE,
@APELLIDO1,
@APELLIDO2,
@PROVINCIA,
@DISTRITO,
@RESIDENCIA,
@TELEFONO,
@MSJ OUTPUT
PRINT 'La identificacion del profesor nuevo es ' + @ID_PROFESOR
PRINT @MSJ
GO

SELECT * FROM PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un profesor
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_PROFESOR(@ID_PROFESOR VARCHAR(20) OUT,
											@NOMBRE VARCHAR(20),
											@APELLIDO1 VARCHAR(20),
											@APELLIDO2 VARCHAR(20),
											@PROVINCIA VARCHAR(30),
											@DISTRITO VARCHAR(40),
											@RESIDENCIA VARCHAR(200),
											@TELEFONO INT,
											@MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR))
				BEGIN
					INSERT INTO PROFESORES
					VALUES (@ID_PROFESOR,@NOMBRE,@APELLIDO1,@APELLIDO2,@PROVINCIA,@DISTRITO,@RESIDENCIA,@TELEFONO)
					SET @MSJ = 'PROFESOR INGRESADO SATISFACTORIAMENTE'
					PRINT 'La identificacion del nuevo profesor es ' + @ID_PROFESOR 
				END
			ELSE
				BEGIN
					UPDATE PROFESORES
					SET ID_PROFESOR= @ID_PROFESOR,NOMBRE=@NOMBRE,APELLIDO1=@APELLIDO1,APELLIDO2=@APELLIDO2,PROVINCIA=@PROVINCIA,DISTRITO
					= @DISTRITO,RESIDENCIA=@RESIDENCIA, TELELFONO=@TELEFONO
					WHERE ID_PROFESOR= @ID_PROFESOR 
					SET @MSJ= 'PROFESOR ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NOMBRE VARCHAR(20)
DECLARE @APELLIDO1 VARCHAR(20)
DECLARE @APELLIDO2 VARCHAR(20)
DECLARE @PROVINCIA VARCHAR(30)
DECLARE @DISTRITO VARCHAR(40)
DECLARE @RESIDENCIA VARCHAR(200)
DECLARE @TELEFONO INT
DECLARE @MSJ VARCHAR(100)

SET @ID_PROFESOR= 118070444
SET @NOMBRE= 'JERONIMO'
SET @APELLIDO1= 'VARELA'
SET @APELLIDO2= 'ALVARADO'
SET @PROVINCIA= 'SAN JOSE'
SET @DISTRITO= 'GUADALUPE'
SET @RESIDENCIA= '240M sur y 300M norte del parque de Guadalupe'
SET @TELEFONO= 88997656

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_PROFESOR]
@ID_PROFESOR OUTPUT,
@NOMBRE,
@APELLIDO1,
@APELLIDO2,
@PROVINCIA,
@DISTRITO,
@RESIDENCIA,
@TELEFONO,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM PROFESORES
-------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un profesor
CREATE OR ALTER PROCEDURE BORRAR_PROFESOR(@ID_PROFESOR VARCHAR(20) OUT,
									      @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR))
				BEGIN
					DELETE FROM PROFESORES
					WHERE  ID_PROFESOR= @ID_PROFESOR

					SET @MSJ = 'PROFESOR BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @ID_PROFESOR= 118070444


EXECUTE @RC= [DBO].[BORRAR_PROFESOR]
@ID_PROFESOR OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Ver si un profesor tiene alguna materia asignada o no
CREATE OR ALTER PROCEDURE PROFESOR_MATERIA(@ID_PROFESOR INT)
AS
BEGIN
	IF NOT EXISTS(SELECT 1 FROM CURSOS_ABIERTOS WHERE ID_PROFESOR=@ID_PROFESOR)
		RETURN 1
	ELSE
		RETURN 0
END
GO

DECLARE @CONDICION_PROF INT
DECLARE @ID_PROFESOR INT

--SET @ID_PROFESOR= Se pone cualquier ID

EXECUTE @CONDICION_PROF= [DBO].[PROFESOR_MATERIA]
IF @CONDICION_PROF=1
	PRINT 'EL PROFESOR TIENE CURSOS ASIGANDOS'
ELSE
	PRINT 'EL PROFESOR NO TIENE CURSOS ASIGANDOS'

------------------------------------------------------------------------------------------------------------------------------------------------
--INSERTAR UNA CERTIFICACION DE PROFESOR
CREATE OR ALTER PROCEDURE INSERTAR_CERTIFICACION_PROFESOR(@NUM_CERTIFICACION INT OUT,
														  @ID_PROFESOR VARCHAR(20),
														  @CODIGO_CURSO VARCHAR(20),
														  @NOMBRE_CERTIFICACION VARCHAR(150),
														  @GRADO_CERTIFICACION VARCHAR(20),
														  @MSJ VARCHAR(100) OUT)
AS
	BEGIN 
		INSERT INTO CERTIFICACIONES_PROFESORES 
		VALUES (@NUM_CERTIFICACION,@ID_PROFESOR,@CODIGO_CURSO,@NOMBRE_CERTIFICACION,@GRADO_CERTIFICACION)
		SET @MSJ = 'CERTIFICACION DE PROFESOR INGRESADA SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @NUM_CERTIFICACION INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @NOMBRE_CERTIFICACION VARCHAR(150)
DECLARE @GRADO_CERTIFICACION VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_CERTIFICACION= 11
SET @ID_PROFESOR= 118070444
SET @CODIGO_CURSO= '13Ñ13'
SET @NOMBRE_CERTIFICACION= 'TITULO EN ALGEBRA'
SET @GRADO_CERTIFICACION= 'MASTER'

EXECUTE @RC= [DBO].[INSERTAR_CERTIFICACION_PROFESOR]
@NUM_CERTIFICACION OUTPUT,
@ID_PROFESOR,
@CODIGO_CURSO,
@NOMBRE_CERTIFICACION,
@GRADO_CERTIFICACION,
@MSJ OUTPUT 

PRINT 'El numero de certificacion es  ' + CAST(@NUM_CERTIFICACION AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM CERTIFICACIONES_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar una certificacion del profesor
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_CERTIFICACION_PROFESOR(@NUM_CERTIFICACION INT OUT,
														  @ID_PROFESOR VARCHAR(20),
														  @CODIGO_CURSO VARCHAR(20),
														  @NOMBRE_CERTIFICACION VARCHAR(150),
														  @GRADO_CERTIFICACION VARCHAR(20),
														  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM CERTIFICACIONES_PROFESORES WHERE NUMERO_CERTIFICACION=@NUM_CERTIFICACION))
				BEGIN
					INSERT INTO CERTIFICACIONES_PROFESORES 
					VALUES (@NUM_CERTIFICACION,@ID_PROFESOR,@CODIGO_CURSO,@NOMBRE_CERTIFICACION,@GRADO_CERTIFICACION)
					SET @MSJ = 'CERTIFICACION DE PROFESOR INGRESADA SATISFACTORIAMENTE'
					PRINT 'El nuevo numero de certificacion es  ' + CAST(@NUM_CERTIFICACION AS VARCHAR)
				END
			ELSE 
				BEGIN
					UPDATE CERTIFICACIONES_PROFESORES
					SET @NUM_CERTIFICACION= @NUM_CERTIFICACION,ID_PROFESOR=@ID_PROFESOR,CODIGO_CURSO=@CODIGO_CURSO,NOMBRE_CERTIFICACION
					=@NOMBRE_CERTIFICACION,GRADO_CERTIFICACION=@GRADO_CERTIFICACION
					WHERE NUMERO_CERTIFICACION= @NUM_CERTIFICACION 
					SET @MSJ= 'CERTIFICACION DE PROFESOR ACTUALIZADA CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @NUM_CERTIFICACION INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @NOMBRE_CERTIFICACION VARCHAR(150)
DECLARE @GRADO_CERTIFICACION VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_CERTIFICACION= 11
SET @ID_PROFESOR= 118070444
SET @CODIGO_CURSO= '13Ñ13'
SET @NOMBRE_CERTIFICACION= 'TITULO EN ALGEBRA'
SET @GRADO_CERTIFICACION= 'LICENCIATURA'

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_CERTIFICACION_PROFESOR]
@NUM_CERTIFICACION OUTPUT,
@ID_PROFESOR,
@CODIGO_CURSO,
@NOMBRE_CERTIFICACION,
@GRADO_CERTIFICACION,
@MSJ OUTPUT 

PRINT @MSJ
GO

SELECT * FROM CERTIFICACIONES_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar una certificacion de profesor
CREATE OR ALTER PROCEDURE BORRAR_CERTIFICACION_PROFESOR(@NUM_CERTIFICACION INT OUT,
												        @MSJ VARCHAR(100) OUT)
AS
		BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM CERTIFICACIONES_PROFESORES WHERE NUMERO_CERTIFICACION=@NUM_CERTIFICACION))
				BEGIN
					DELETE FROM CERTIFICACIONES_PROFESORES
					WHERE NUMERO_CERTIFICACION= @NUM_CERTIFICACION

					SET @MSJ = 'CERTIFICACION DE PROFESOR BORRADA SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @NUM_CERTIFICACION INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_CERTIFICACION= 11


EXECUTE @RC= [DBO].[BORRAR_CERTIFICACION_PROFESOR]
@NUM_CERTIFICACION OUTPUT,
@MSJ OUTPUT 

PRINT @MSJ
GO

SELECT * FROM CERTIFICACIONES_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los profesores que son Master en su grado de certificacion(SE PUEDE MOSTRAR CUALQUIER GRADO@)
CREATE OR ALTER PROCEDURE PROFESORES_GRADO_CERTIFICACION
AS
	BEGIN
		SELECT CERTIFICACIONES_PROFESORES.ID_PROFESOR,CONCAT(NOMBRE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE PROFESOR', GRADO_CERTIFICACION
		FROM CERTIFICACIONES_PROFESORES INNER JOIN PROFESORES
		ON CERTIFICACIONES_PROFESORES.ID_PROFESOR= PROFESORES.ID_PROFESOR
		WHERE GRADO_CERTIFICACION= 'MASTER'
	END
 EXECUTE [DBO].[PROFESORES_GRADO_CERTIFICACION]

------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en los dias fuera de los profesores
CREATE OR ALTER PROCEDURE DIAS_FUERA_PROFESOR(@CODIGO_REGISTRO_D_F VARCHAR(20)OUT,
											  @ID_PROFESOR VARCHAR(20),
											  @NUMERO_D_F INT,
											  @FECHA_I DATE,
											  @FECHA_F DATE,
											  @MOTIVO_D_F VARCHAR(20),
											  @OBSERVACIONES VARCHAR(200),
											  @MSJ VARCHAR(100) OUT)
AS 
	BEGIN 
		INSERT INTO DIAS_FUERA_PROFES 
		VALUES (@CODIGO_REGISTRO_D_F,@ID_PROFESOR,@NUMERO_D_F,@FECHA_I,@FECHA_F,@MOTIVO_D_F,@OBSERVACIONES)
		SET @MSJ = 'REGISTRO DEL DIA FUERA INGRESADO SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @CODIGO_REGISTRO_D_F VARCHAR(20)
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NUMERO_D_F INT
DECLARE @FECHA_I DATE
DECLARE @FECHA_F DATE
DECLARE @MOTIVO_D_F VARCHAR(20)
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_REGISTRO_D_F= '11H11'
SET @ID_PROFESOR= 118070444
SET @NUMERO_D_F= 3
SET @FECHA_I= '20230115'
SET @FECHA_F= '20230201'
SET @MOTIVO_D_F = 'CAPACITACION'
SET @OBSERVACIONES = 'Capacitacion sobre Algebra Lineal'

EXECUTE @RC= [DBO].[DIAS_FUERA_PROFESOR]
@CODIGO_REGISTRO_D_F OUTPUT,
@ID_PROFESOR,
@NUMERO_D_F,
@FECHA_I,
@FECHA_F,
@MOTIVO_D_F,
@OBSERVACIONES,
@MSJ OUTPUT

PRINT 'El codigo del registro de dia fuera del profesor es ' + @CODIGO_REGISTRO_D_F
PRINT @MSJ
GO

SELECT * FROM DIAS_FUERA_PROFES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en los dias fuera de los profesores
CREATE OR ALTER PROCEDURE ACTUALIZAR_DIAS_FUERA_PROFESOR(@CODIGO_REGISTRO_D_F VARCHAR(20)OUT,
											  @ID_PROFESOR VARCHAR(20),
											  @NUMERO_D_F INT,
											  @FECHA_I DATE,
											  @FECHA_F DATE,
											  @MOTIVO_D_F VARCHAR(20),
											  @OBSERVACIONES VARCHAR(200),
											  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM DIAS_FUERA_PROFES WHERE CODIGO_REGISTRO_DIAS_FUERA=@CODIGO_REGISTRO_D_F))
				BEGIN
					INSERT INTO DIAS_FUERA_PROFES 
					VALUES (@CODIGO_REGISTRO_D_F,@ID_PROFESOR,@NUMERO_D_F,@FECHA_I,@FECHA_F,@MOTIVO_D_F,@OBSERVACIONES)
					SET @MSJ = 'REGISTRO DEL DIA FUERA INGRESADO SATISFACTORIAMENTE'
					PRINT 'El codigo del registro de dia fuera del profesor es ' + @CODIGO_REGISTRO_D_F
				END
			ELSE
				BEGIN
					UPDATE DIAS_FUERA_PROFES
					SET CODIGO_REGISTRO_DIAS_FUERA=@CODIGO_REGISTRO_D_F,ID_PROFESOR= @ID_PROFESOR,NUMERO_DIAS_FUERA=@NUMERO_D_F,FECHA_INICIO=@FECHA_I,
					FECHA_FIN=@FECHA_F,MOTIVO_DE_DIA_FUERA=@MOTIVO_D_F,OBSERVACIONES= @OBSERVACIONES
					WHERE CODIGO_REGISTRO_DIAS_FUERA= @CODIGO_REGISTRO_D_F
					SET @MSJ= 'DIA FUERA DEL PROFESOR ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @CODIGO_REGISTRO_D_F VARCHAR(20)
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NUMERO_D_F INT
DECLARE @FECHA_I DATE
DECLARE @FECHA_F DATE
DECLARE @MOTIVO_D_F VARCHAR(20)
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_REGISTRO_D_F= '11H11'
SET @ID_PROFESOR= 118070444
SET @NUMERO_D_F= 3
SET @FECHA_I= '20230115'
SET @FECHA_F= '20230205'
SET @MOTIVO_D_F = 'CAPACITACION'
SET @OBSERVACIONES = 'Capacitacion sobre Algebra Lineal'

EXECUTE @RC= [DBO].[ACTUALIZAR_DIAS_FUERA_PROFESOR]
@CODIGO_REGISTRO_D_F OUTPUT,
@ID_PROFESOR,
@NUMERO_D_F,
@FECHA_I,
@FECHA_F,
@MOTIVO_D_F,
@OBSERVACIONES,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM DIAS_FUERA_PROFES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro de dias fuera de los profesores
CREATE OR ALTER PROCEDURE BORRAR_DIAS_FUERA_PROFESOR(@CODIGO_REGISTRO_D_F VARCHAR(20)OUT,
													 @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM DIAS_FUERA_PROFES WHERE CODIGO_REGISTRO_DIAS_FUERA=@CODIGO_REGISTRO_D_F))
				BEGIN
					DELETE FROM DIAS_FUERA_PROFES
					WHERE  CODIGO_REGISTRO_DIAS_FUERA= @CODIGO_REGISTRO_D_F

					SET @MSJ = 'REGISTRO DE DIAS FUERA DEL PROFESOR BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @CODIGO_REGISTRO_D_F VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_REGISTRO_D_F= '11H11'

EXECUTE @RC= [DBO].[BORRAR_DIAS_FUERA_PROFESOR]
@CODIGO_REGISTRO_D_F OUTPUT,
@MSJ OUTPUT
PRINT @MSJ
GO

SELECT * FROM DIAS_FUERA_PROFES
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los profesores, su motivo del dia fuera y las observaciones
CREATE OR ALTER PROCEDURE PROFESORES_MOTIVOS_DIA_FUERA
AS
	BEGIN
		SELECT DIAS_FUERA_PROFES.ID_PROFESOR,CONCAT(NOMBRE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE PROFESOR', MOTIVO_DE_DIA_FUERA,OBSERVACIONES
		FROM DIAS_FUERA_PROFES INNER JOIN PROFESORES
		ON DIAS_FUERA_PROFES.ID_PROFESOR= PROFESORES.ID_PROFESOR
	END
	EXECUTE [DBO].[PROFESORES_MOTIVOS_DIA_FUERA]

------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en las horas laboradas de los profesores
CREATE OR ALTER PROCEDURE INSERTAR_HORAS_LAB_PROFESOR(@NUM_REGISTRO_H INT OUT,
											@ID_PROFESOR VARCHAR(20),
											@HORA_E TIME,
											@HORA_S TIME,
											@FECHA DATE,
											@HORAS_ORDINARIAS_L INT,
											@MSJ VARCHAR(100) OUT)
AS 
	BEGIN 
		INSERT INTO HORAS_LABORADAS_PROFESORES(NUMERO_REGISTRO_HORAS,ID_PROFESOR,HORA_ENTRADA,HORA_SALIDA,FECHA,HORAS_ORDINARIAS_LABORADAS)
		VALUES (@NUM_REGISTRO_H,@ID_PROFESOR,@HORA_E,@HORA_S,@FECHA,@HORAS_ORDINARIAS_L)
		SET @MSJ = 'REGISTRO DE HORAS LABORADAS DEL PROFESOR INGRESADO SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @NUM_REGISTRO_H INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @HORA_E TIME
DECLARE @HORA_S TIME
DECLARE @FECHA DATE
DECLARE @HORAS_ORDINARIAS_L INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_REGISTRO_H=121
SET @ID_PROFESOR= 118070444
SET @HORA_E= '07:00'
SET @HORA_S= '15:00'
SET @FECHA= '20230114'
SET @HORAS_ORDINARIAS_L= 8

EXECUTE @RC= [DBO].[INSERTAR_HORAS_LAB_PROFESOR]
@NUM_REGISTRO_H OUTPUT,
@ID_PROFESOR,
@HORA_E,
@HORA_S,
@FECHA,
@HORAS_ORDINARIAS_L,
@MSJ OUTPUT
PRINT 'El numero de registro nuevo es  ' + CAST(@NUM_REGISTRO_H AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM HORAS_LABORADAS_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en las horas laboradas de los profesores
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_HORAS_LAB_PROFESOR(@NUM_REGISTRO_H INT OUT,
											@ID_PROFESOR VARCHAR(20),
											@HORA_E TIME,
											@HORA_S TIME,
											@FECHA DATE,
											@HORAS_ORDINARIAS_L INT,
											@MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM HORAS_LABORADAS_PROFESORES WHERE NUMERO_REGISTRO_HORAS=@NUM_REGISTRO_H))
				BEGIN
					INSERT INTO HORAS_LABORADAS_PROFESORES(NUMERO_REGISTRO_HORAS,ID_PROFESOR,HORA_ENTRADA,HORA_SALIDA,FECHA,HORAS_ORDINARIAS_LABORADAS)
					VALUES (@NUM_REGISTRO_H,@ID_PROFESOR,@HORA_E,@HORA_S,@FECHA,@HORAS_ORDINARIAS_L)
					SET @MSJ = 'REGISTRO DE HORAS LABORADAS DEL PROFESOR INGRESADO SATISFACTORIAMENTE'
					PRINT 'El numero de registro nuevo es  ' + CAST(@NUM_REGISTRO_H AS VARCHAR)
				END
			ELSE
				BEGIN
					UPDATE HORAS_LABORADAS_PROFESORES
					SET NUMERO_REGISTRO_HORAS= @NUM_REGISTRO_H ,ID_PROFESOR= @ID_PROFESOR,HORA_ENTRADA=@HORA_E,HORA_SALIDA=@HORA_S,
					FECHA=@FECHA,HORAS_ORDINARIAS_LABORADAS=@HORAS_ORDINARIAS_L
					WHERE NUMERO_REGISTRO_HORAS= @NUM_REGISTRO_H
					SET @MSJ= 'REGISTRO DE HORAS LABORADAS DEL PROFESOR ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUM_REGISTRO_H INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @HORA_E TIME
DECLARE @HORA_S TIME
DECLARE @FECHA DATE
DECLARE @HORAS_ORDINARIAS_L INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_REGISTRO_H=121
SET @ID_PROFESOR= 118070444
SET @HORA_E= '07:00'
SET @HORA_S= '14:00'
SET @FECHA= '20230114'
SET @HORAS_ORDINARIAS_L= 7

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_HORAS_LAB_PROFESOR]
@NUM_REGISTRO_H OUTPUT,
@ID_PROFESOR,
@HORA_E,
@HORA_S,
@FECHA,
@HORAS_ORDINARIAS_L,
@MSJ OUTPUT
PRINT @MSJ
GO

SELECT * FROM HORAS_LABORADAS_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro en las horas laboradas de los profesores
CREATE OR ALTER PROCEDURE BORRAR_HORAS_LAB_PROFESOR(@NUM_REGISTRO_H INT OUT,
													@MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF ( EXISTS(SELECT 1 FROM HORAS_LABORADAS_PROFESORES WHERE NUMERO_REGISTRO_HORAS=@NUM_REGISTRO_H))
				BEGIN
					DELETE FROM HORAS_LABORADAS_PROFESORES
					WHERE  NUMERO_REGISTRO_HORAS=@NUM_REGISTRO_H

					SET @MSJ = 'REGISTRO DE HORAS LABORADAS DEL PROFESOR BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @NUM_REGISTRO_H INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_REGISTRO_H=121


EXECUTE @RC= [DBO].[BORRAR_HORAS_LAB_PROFESOR]
@NUM_REGISTRO_H OUTPUT,
@MSJ OUTPUT
PRINT @MSJ
GO

SELECT * FROM HORAS_LABORADAS_PROFESORES
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los profesores que han trabajado horas extra y cuantas horas extra trabajò
CREATE OR ALTER PROCEDURE HORAS_EXTRA_PROFESORES
AS
BEGIN
	SELECT PROFESORES.ID_PROFESOR, CONCAT(NOMBRE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE PROFESOR', 
	SUM(HORAS_EXTRA_LABORADAS) AS 'HORAS EXTRA LABORADAS'
	FROM HORAS_LABORADAS_PROFESORES INNER JOIN PROFESORES
	ON HORAS_LABORADAS_PROFESORES.ID_PROFESOR = PROFESORES.ID_PROFESOR
	WHERE HORAS_LABORADAS_PROFESORES.HORAS_EXTRA_LABORADAS IS NOT NULL
	GROUP BY PROFESORES.ID_PROFESOR,NOMBRE,APELLIDO1,APELLIDO2
END
EXECUTE [DBO].[HORAS_EXTRA_PROFESORES]
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en las deducciones
select * FROM DEDUCCIONES
CREATE OR ALTER PROCEDURE INSERTAR_DEDUCCIONES(@NUMERO_DEDUCCION INT OUT,
											   @REGIMENES_PENSIONES FLOAT,
											   @ENFERMEDAD_MATERNIDAD FLOAT,
											   @INVALIDEZ_VEJEZ_MUERTE FLOAT,
											   @TOTAL_DEDUCCIONES FLOAT,
											   @MSJ VARCHAR(100) OUT)
AS 
	BEGIN 
		INSERT INTO DEDUCCIONES 
		VALUES (@NUMERO_DEDUCCION,@REGIMENES_PENSIONES,@ENFERMEDAD_MATERNIDAD,@INVALIDEZ_VEJEZ_MUERTE,@TOTAL_DEDUCCIONES)
		SET @MSJ = 'DEDUCCION INGRESADA SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @REGIMENES_PENSIONES FLOAT
DECLARE @ENFERMEDAD_MATERNIDAD FLOAT
DECLARE @INVALIDEZ_VEJEZ_MUERTE FLOAT
DECLARE @TOTAL_DEDUCCIONES FLOAT
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_DEDUCCION= 11
SET @REGIMENES_PENSIONES= 1
SET @ENFERMEDAD_MATERNIDAD=5.5
SET @INVALIDEZ_VEJEZ_MUERTE= 3.84
SET @TOTAL_DEDUCCIONES= 10.34

EXECUTE @RC= [DBO].[INSERTAR_DEDUCCIONES]
@NUMERO_DEDUCCION OUTPUT,
@REGIMENES_PENSIONES,
@ENFERMEDAD_MATERNIDAD,
@INVALIDEZ_VEJEZ_MUERTE,
@TOTAL_DEDUCCIONES,
@MSJ OUTPUT 

PRINT 'El numero de la nueva deduccion es ' + CAST(@NUMERO_DEDUCCION AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM DEDUCCIONES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en las deducciones
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_DEDUCCIONES(@NUMERO_DEDUCCION INT OUT,
											   @REGIMENES_PENSIONES FLOAT,
											   @ENFERMEDAD_MATERNIDAD FLOAT,
											   @INVALIDEZ_VEJEZ_MUERTE FLOAT,
											   @TOTAL_DEDUCCIONES FLOAT,
											   @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM DEDUCCIONES WHERE NUMERO_DEDUCCION=@NUMERO_DEDUCCION))
				BEGIN
					INSERT INTO DEDUCCIONES 
					VALUES (@NUMERO_DEDUCCION,@REGIMENES_PENSIONES,@ENFERMEDAD_MATERNIDAD,@INVALIDEZ_VEJEZ_MUERTE,@TOTAL_DEDUCCIONES)
					SET @MSJ = 'DEDUCCION INGRESADA SATISFACTORIAMENTE'
					PRINT 'El numero de la nueva deduccion es ' + CAST(@NUMERO_DEDUCCION AS VARCHAR)
				END
			ELSE
				BEGIN
					UPDATE DEDUCCIONES 
					SET NUMERO_DEDUCCION= @NUMERO_DEDUCCION,REGIMENES_PENSIONES=@REGIMENES_PENSIONES,ENFERMEDAD_MATERNIDAD=@ENFERMEDAD_MATERNIDAD,
					INVALIDEZ_VEJEZ_MUERTE=@INVALIDEZ_VEJEZ_MUERTE, TOTAL_DEDUCCIONES= @TOTAL_DEDUCCIONES
					WHERE NUMERO_DEDUCCION=@NUMERO_DEDUCCION
					SET @MSJ= 'DEDUCCION ACTUALIZADA CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @REGIMENES_PENSIONES FLOAT
DECLARE @ENFERMEDAD_MATERNIDAD FLOAT
DECLARE @INVALIDEZ_VEJEZ_MUERTE FLOAT
DECLARE @TOTAL_DEDUCCIONES FLOAT
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_DEDUCCION= 12
SET @REGIMENES_PENSIONES= 1
SET @ENFERMEDAD_MATERNIDAD=5.5
SET @INVALIDEZ_VEJEZ_MUERTE= 3.84
SET @TOTAL_DEDUCCIONES= 10.34

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_DEDUCCIONES]
@NUMERO_DEDUCCION OUTPUT,
@REGIMENES_PENSIONES,
@ENFERMEDAD_MATERNIDAD,
@INVALIDEZ_VEJEZ_MUERTE,
@TOTAL_DEDUCCIONES,
@MSJ OUTPUT 


PRINT @MSJ
GO

SELECT * FROM DEDUCCIONES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro en las deducciones
CREATE OR ALTER PROCEDURE BORRAR_DEDUCCIONES(@NUMERO_DEDUCCION INT OUT,
											 @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM DEDUCCIONES WHERE NUMERO_DEDUCCION=@NUMERO_DEDUCCION))
				BEGIN
					DELETE FROM DEDUCCIONES
					WHERE NUMERO_DEDUCCION=@NUMERO_DEDUCCION

					SET @MSJ = 'DEDUCCION BORRADA SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_DEDUCCION= 12

EXECUTE @RC= [DBO].[BORRAR_DEDUCCIONES]
@NUMERO_DEDUCCION OUTPUT,
@MSJ OUTPUT 


PRINT @MSJ
GO

SELECT * FROM DEDUCCIONES
------------------------------------------------------------------------------------------------------------------------------------------------
--Sumar el total de todas las deducciones
CREATE OR ALTER PROCEDURE TOTAL_DEDUCCIONES
AS
BEGIN
	SELECT (REGIMENES_PENSIONES+ENFERMEDAD_MATERNIDAD+INVALIDEZ_VEJEZ_MUERTE) AS 'Total de deducciones'
	FROM DEDUCCIONES
	WHERE NUMERO_DEDUCCION=1
END
EXECUTE [DBO].[TOTAL_DEDUCCIONES]

------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un nuevo registro en la tabla de los pagos de los profes
CREATE OR ALTER PROCEDURE INSERTAR_PAGO_PROFESOR(@NUMERO_REGISTRO_PAGO INT OUT,
												 @ID_PROFESOR VARCHAR(20),
												 @NUMERO_CERTIFICACION INT,
												 @NUMERO_REGISTRO_H INT,
												 @NUMERO_DEDUCCION INT,
												 @SALARIO_BRUTO FLOAT,
												 @MSJ VARCHAR(100)OUT)
AS 
	BEGIN 
		INSERT INTO PAGOS_PROFES(ID_PROFESOR,NUMERO_CERTIFICACION,NUMERO_REGISTRO_HORAS,NUMERO_DEDUCCION,SALARIO_BRUTO)
		VALUES (@ID_PROFESOR,@NUMERO_CERTIFICACION,@NUMERO_REGISTRO_H,@NUMERO_DEDUCCION,@SALARIO_BRUTO)
		SELECT @NUMERO_REGISTRO_PAGO= IDENT_CURRENT('PAGO')
		SET @MSJ = 'PAGO A PROFESOR INGRESADO SATISFACTORIAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @NUMERO_REGISTRO_PAGO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NUMERO_CERTIFICACION INT
DECLARE @NUMERO_REGISTRO_H INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @SALARIO_BRUTO FLOAT
DECLARE @MSJ VARCHAR(100)

SET @ID_PROFESOR= 118070444
SET @NUMERO_CERTIFICACION= 11
SET @NUMERO_REGISTRO_H=121
SET @NUMERO_DEDUCCION= 11
SET @SALARIO_BRUTO= 142400

EXECUTE @RC= [DBO].[INSERTAR_PAGO_PROFESOR]
@NUMERO_REGISTRO_PAGO OUTPUT,
@ID_PROFESOR,
@NUMERO_CERTIFICACION,
@NUMERO_REGISTRO_H,
@NUMERO_DEDUCCION,
@SALARIO_BRUTO,
@MSJ OUTPUT

PRINT 'El numero del nuevo registro de pago es  ' + CAST(@NUMERO_REGISTRO_PAGO AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM PAGOS_PROFES
-----------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un nuevo registro en la tabla de los pagos de los profes
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_PAGO_PROFESOR(@NUMERO_REGISTRO_PAGO INT OUT,
												 @ID_PROFESOR VARCHAR(20),
												 @NUMERO_CERTIFICACION INT,
												 @NUMERO_REGISTRO_H INT,
												 @NUMERO_DEDUCCION INT,
												 @SALARIO_BRUTO FLOAT,
												 @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM PAGOS_PROFES WHERE NUMERO_REGISTRO_PAGO=@NUMERO_REGISTRO_PAGO))
				BEGIN
					INSERT INTO PAGOS_PROFES(ID_PROFESOR,NUMERO_CERTIFICACION,NUMERO_REGISTRO_HORAS,NUMERO_DEDUCCION,SALARIO_BRUTO)
				VALUES (@ID_PROFESOR,@NUMERO_CERTIFICACION,@NUMERO_REGISTRO_H,@NUMERO_DEDUCCION,@SALARIO_BRUTO)
				SELECT @NUMERO_REGISTRO_PAGO= IDENT_CURRENT('PAGO')
				SET @MSJ = 'PAGO A PROFESOR INGRESADO SATISFACTORIAMENTE'
				PRINT 'El numero del nuevo registro de pago es  ' + CAST(@NUMERO_REGISTRO_PAGO AS VARCHAR)
				END
			ELSE
				BEGIN
					UPDATE PAGOS_PROFES
					
					SET ID_PROFESOR = @ID_PROFESOR,NUMERO_REGISTRO_HORAS=@NUMERO_REGISTRO_H,
					NUMERO_DEDUCCION=@NUMERO_DEDUCCION,SALARIO_BRUTO=@SALARIO_BRUTO
					WHERE ID_PROFESOR= @ID_PROFESOR 
					SET @MSJ= 'PAGO AL PROFESOR ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUMERO_REGISTRO_PAGO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @NUMERO_CERTIFICACION INT
DECLARE @NUMERO_REGISTRO_H INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @SALARIO_BRUTO FLOAT
DECLARE @MSJ VARCHAR(100)

SET @ID_PROFESOR= 118070444
SET @NUMERO_CERTIFICACION= 11
SET @NUMERO_REGISTRO_H=121
SET @NUMERO_DEDUCCION= 12
SET @SALARIO_BRUTO= 142400

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_PAGO_PROFESOR]
@NUMERO_REGISTRO_PAGO OUTPUT,
@ID_PROFESOR,
@NUMERO_CERTIFICACION,
@NUMERO_REGISTRO_H,
@NUMERO_DEDUCCION,
@SALARIO_BRUTO,
@MSJ OUTPUT

PRINT @MSJ
GO
SELECT*FROM PAGOS_PROFES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un nuevo registro en la tabla de los pagos de los profes
CREATE OR ALTER PROCEDURE BORRAR_PAGO_PROFESOR(
												@NUMERO_DEDUCCION INT,
											   @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM PAGOS_PROFES WHERE NUMERO_DEDUCCION=@NUMERO_DEDUCCION))
				BEGIN
					DELETE FROM PAGOS_PROFES
					WHERE  NUMERO_DEDUCCION= @NUMERO_DEDUCCION

					SET @MSJ = 'PAGO A PROFESOR BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO


DECLARE @RC INT
DECLARE @NUMERO_DEDUCCION INT
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_DEDUCCION=12

EXECUTE @RC= [DBO].[BORRAR_PAGO_PROFESOR]
@NUMERO_DEDUCCION,
@MSJ OUTPUT

PRINT @MSJ
GO
SELECT*FROM PAGOS_PROFES

------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar el salario bruto de los profesores
CREATE OR ALTER PROCEDURE PAGOS_PROFESORES
AS
BEGIN
	SELECT PAGOS_PROFES.ID_PROFESOR, CONCAT(NOMBRE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE PROFESOR',SALARIO_BRUTO
	FROM PAGOS_PROFES INNER JOIN PROFESORES
	ON PAGOS_PROFES.ID_PROFESOR = PROFESORES.ID_PROFESOR
END
EXECUTE [DBO].[PAGOS_PROFESORES]
------------------------------------------------------------------------------------------------------------------------------------------------
ALTER TABLE LABORATORIOS
	DROP CONSTRAINT [CK__LABORATOR__NUMER__4AB81AF0]
--Insertar registros en la tabla laboratorios
CREATE OR ALTER PROCEDURE INSERTAR_LABORATORIO(@CODIGO_LABORATORIO VARCHAR(20) OUT,
												@NUMERO_AULA INT,
												@MSJ VARCHAR(10) OUT)
AS
	BEGIN 
		INSERT INTO LABORATORIOS VALUES
		(@CODIGO_LABORATORIO,@NUMERO_AULA)
		SET @MSJ='LABORATORIO INGRESADO CORRECTAMENTE'
	END
GO 
DECLARE @RC INT
DECLARE @CODIGO_LABORATORIO VARCHAR(20)
DECLARE @NUMERO_AULA INT
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_LABORATORIO= '11Q'
SET @NUMERO_AULA= 11

EXECUTE @RC= [DBO].[INSERTAR_LABORATORIO]
@CODIGO_LABORATORIO OUTPUT,
@NUMERO_AULA,
@MSJ OUTPUT
PRINT 'El codigo del nuevo laboratorio es ' + @CODIGO_LABORATORIO
PRINT @MSJ
GO

SELECT * FROM LABORATORIOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar registros en la tabla laboratorios
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_LABORATORIO(@CODIGO_LABORATORIO VARCHAR(20) OUT,
												@NUMERO_AULA INT,
												@MSJ VARCHAR(10) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE CODIGO_LABORATORIO=@CODIGO_LABORATORIO))
				BEGIN
					INSERT INTO LABORATORIOS VALUES
					(@CODIGO_LABORATORIO,@NUMERO_AULA)
					SET @MSJ='LABORATORIO INGRESADO CORRECTAMENTE'
					PRINT 'El codigo del nuevo laboratorio es ' + @CODIGO_LABORATORIO
			    END
			ELSE
				BEGIN
					UPDATE LABORATORIOS
					SET CODIGO_LABORATORIO=@CODIGO_LABORATORIO, NUMERO_AULA=@NUMERO_AULA
					WHERE CODIGO_LABORATORIO = @CODIGO_LABORATORIO 
					SET @MSJ= 'LABORATORIO ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @CODIGO_LABORATORIO VARCHAR(20)
DECLARE @NUMERO_AULA INT
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_LABORATORIO= '11Q'
SET @NUMERO_AULA= 12

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_LABORATORIO]
@CODIGO_LABORATORIO OUTPUT,
@NUMERO_AULA,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM LABORATORIOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar registros en la tabla laboratorios
CREATE OR ALTER PROCEDURE BORRAR_LABORATORIO(@CODIGO_LABORATORIO VARCHAR(20) OUT,
											@MSJ VARCHAR(10) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM LABORATORIOS WHERE CODIGO_LABORATORIO=@CODIGO_LABORATORIO))
				BEGIN
					DELETE FROM LABORATORIOS
					WHERE  CODIGO_LABORATORIO = @CODIGO_LABORATORIO

					SET @MSJ = 'LABORATORIO BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @CODIGO_LABORATORIO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)
SET @CODIGO_LABORATORIO= '11Q'


EXECUTE @RC= [DBO].[BORRAR_LABORATORIO]
@CODIGO_LABORATORIO OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM LABORATORIOS				
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los laboratorios y sus materias asignadas
CREATE OR ALTER PROCEDURE MOSTRAR_LAB
AS
BEGIN
	SELECT LABORATORIOS.CODIGO_LABORATORIO,NUMERO_AULA, CURSOS_ABIERTOS.CODIGO_CURSO,NOMBRE_CURSO
	FROM LABORATORIOS INNER JOIN CURSOS_ABIERTOS 
	ON LABORATORIOS.CODIGO_LABORATORIO= CURSOS_ABIERTOS.CODIGO_LABORATORIO INNER JOIN CURSOS
	ON CURSOS_ABIERTOS.CODIGO_CURSO = CURSOS.CODIGO_CURSO
END

EXECUTE [DBO].[MOSTRAR_LAB]
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un estudiante
CREATE OR ALTER PROCEDURE INSERTAR_ESTUDIANTE(@ID_ESTUDIANTE VARCHAR(20)OUT,
						  @NOMBRE_ESTUDIANTE VARCHAR(20),
						  @APELLIDO1 VARCHAR(20),
						  @APELLIDO2 VARCHAR(20),
						  @RESIDENCIA VARCHAR(200),
						  @FECHA_N DATE,
						  @FECHA_INGRESO DATE,
						  @ESTADO_ESTUDIANTE VARCHAR(15),
						  @MSJ VARCHAR(100)OUT)
AS
	BEGIN
		INSERT INTO ESTUDIANTES VALUES
		(@ID_ESTUDIANTE, @NOMBRE_ESTUDIANTE,@APELLIDO1,@APELLIDO2,@RESIDENCIA,@FECHA_N,@FECHA_INGRESO,@ESTADO_ESTUDIANTE)
		SET @MSJ= 'ESTUDIANTE INGRESADO CON EXSITO'
	END
GO
DECLARE @RC INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @NOMBRE_ESTUDIANTE VARCHAR(20)
DECLARE @APELLIDO1 VARCHAR(20)
DECLARE @APELLIDO2 VARCHAR(20)
DECLARE @RESIDENCIA VARCHAR(200)
DECLARE @FECHA_N DATE
DECLARE @FECHA_INGRESO DATE
DECLARE @ESTADO_ESTUDIANTE VARCHAR(15)
DECLARE @MSJ VARCHAR(100)

SET @ID_ESTUDIANTE= 558735544
SET @NOMBRE_ESTUDIANTE= 'ASHLY'
SET @APELLIDO1= 'HIDALGO'
SET @APELLIDO2= 'MADRIGAL'
SET @RESIDENCIA= '175M norte y 25M sur del parque de San Jeronimo de Naranjo de Alajuela'
SET @FECHA_N= '20010326'
SET @FECHA_INGRESO= '20210815'
SET @ESTADO_ESTUDIANTE= 'INA'

EXECUTE @RC= [DBO].[INSERTAR_ESTUDIANTE]
@ID_ESTUDIANTE OUTPUT,
@NOMBRE_ESTUDIANTE,
@APELLIDO1,
@APELLIDO2,
@RESIDENCIA,
@FECHA_N,
@FECHA_INGRESO,
@ESTADO_ESTUDIANTE,
@MSJ OUTPUT
PRINT 'La identificacion del estudiante nuevo es ' + @ID_ESTUDIANTE
PRINT @MSJ
GO

SELECT * FROM ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un estudiante
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_ESTUDIANTE(@ID_ESTUDIANTE VARCHAR(20)OUT,
						  @NOMBRE_ESTUDIANTE VARCHAR(20),
						  @APELLIDO1 VARCHAR(20),
						  @APELLIDO2 VARCHAR(20),
						  @RESIDENCIA VARCHAR(200),
						  @FECHA_N DATE,
						  @FECHA_INGRESO DATE,
						  @ESTADO_ESTUDIANTE VARCHAR(15),
						  @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM ESTUDIANTES WHERE ID_ESTUDIANTE=@ID_ESTUDIANTE))
				BEGIN
					INSERT INTO ESTUDIANTES VALUES
					(@ID_ESTUDIANTE, @NOMBRE_ESTUDIANTE,@APELLIDO1,@APELLIDO2,@RESIDENCIA,@FECHA_N,@FECHA_INGRESO,@ESTADO_ESTUDIANTE)
					SET @MSJ= 'ESTUDIANTE INGRESADO CON EXSITO'
					PRINT 'La identificacion del estudiante nuevo es ' + @ID_ESTUDIANTE
				END
			ELSE
				BEGIN
					UPDATE ESTUDIANTES
					SET ID_ESTUDIANTE= @ID_ESTUDIANTE,NOMBRE_ESTUDIANTE=@NOMBRE_ESTUDIANTE,APELLIDO1=@APELLIDO1,APELLIDO2=@APELLIDO2,
					RESIDENCIA=@RESIDENCIA,FECHA_NACIMIENTO= @FECHA_N,FECHA_INGRESO= @FECHA_INGRESO, ESTADO_ESTUDIANTE=@ESTADO_ESTUDIANTE
					WHERE ID_ESTUDIANTE= @ID_ESTUDIANTE 
					SET @MSJ= 'ESTUDIANTE ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @NOMBRE_ESTUDIANTE VARCHAR(20)
DECLARE @APELLIDO1 VARCHAR(20)
DECLARE @APELLIDO2 VARCHAR(20)
DECLARE @RESIDENCIA VARCHAR(200)
DECLARE @FECHA_N DATE
DECLARE @FECHA_INGRESO DATE
DECLARE @ESTADO_ESTUDIANTE VARCHAR(15)
DECLARE @MSJ VARCHAR(100)

SET @ID_ESTUDIANTE= 558735544
SET @NOMBRE_ESTUDIANTE= 'ASHLY'
SET @APELLIDO1= 'HIDALGO'
SET @APELLIDO2= 'MADRIGAL'
SET @RESIDENCIA= '175M norte y 20M sur del parque de San Jeronimo de Naranjo de Alajuela'
SET @FECHA_N= '20010326'
SET @FECHA_INGRESO= '20210815'
SET @ESTADO_ESTUDIANTE= 'INA'

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_ESTUDIANTE]
@ID_ESTUDIANTE OUTPUT,
@NOMBRE_ESTUDIANTE,
@APELLIDO1,
@APELLIDO2,
@RESIDENCIA,
@FECHA_N,
@FECHA_INGRESO,
@ESTADO_ESTUDIANTE,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un estudiante
CREATE OR ALTER PROCEDURE BORRAR_ESTUDIANTE(@ID_ESTUDIANTE VARCHAR(20)OUT,
														  @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF ( EXISTS(SELECT 1 FROM ESTUDIANTES WHERE ID_ESTUDIANTE=@ID_ESTUDIANTE))
				BEGIN
					DELETE FROM ESTUDIANTES
					WHERE  ID_ESTUDIANTE= @ID_ESTUDIANTE

					SET @MSJ = 'ESTUDIANTE BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @ID_ESTUDIANTE=558735544


EXECUTE @RC= [DBO].[BORRAR_ESTUDIANTE]
@ID_ESTUDIANTE OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM ESTUDIANTES
---------------------------------------------------------------------------------------------------------------------------------------------------
--Ver si un estudiante tiene la matricula inactiva o no
CREATE OR ALTER PROCEDURE VALIDACION_MATRICULA_EST(@ID_ESTUDIANTE VARCHAR(20))
AS 
	BEGIN
		IF NOT EXISTS(SELECT 1 FROM ENCABEZADO_MATRICULAS WHERE ID_ESTUDIANTE=@ID_ESTUDIANTE)
			IF NOT EXISTS(SELECT 1 FROM ENCABEZADO_MATRICULAS WHERE ESTADO_M= 'INACTIVO')
				RETURN 1
			ELSE
				RETURN 0
	END
GO

DECLARE @CONDICION_EST INT
DECLARE @ID_ESTUDIANTE INT

--SET @ID_ESTUDIANTE= Se pone cualquier ID

EXECUTE @CONDICION_EST= [DBO].[VALIDACION_MATRICULA_EST]
IF @CONDICION_EST=1
	PRINT 'LA MATRICULA DEL ESTUDIANTE ESTA INACTIVA'
ELSE
	PRINT 'LA MATRICULA ESTA ACTIVA'

------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en los dias feriados de lo estudiantes
CREATE OR ALTER PROCEDURE INSERTAR_FERIADO(@COD_REGISTRO_FERIADO INT OUT,
										   @NUMERO_FERIADO INT,
										   @MOTIVO_FERIADO VARCHAR(20),
										   @ID_ESTUDIANTE VARCHAR(20),
										   @FECHA_INICIO_V DATE,
										   @FECHA_FIN_V DATE,
										   @OBSERVACIONES VARCHAR(200),
										   @MSJ VARCHAR(100) OUT)
AS
	BEGIN 
		INSERT INTO FERIADOS_ESTUDIANTES 
		VALUES(@COD_REGISTRO_FERIADO,@NUMERO_FERIADO,@MOTIVO_FERIADO,@ID_ESTUDIANTE,@FECHA_INICIO_V,@FECHA_FIN_V,@OBSERVACIONES)
		SET @MSJ= 'DIA FERIADO DEL ESTUDIANTE INGRESADO CON EXITO'
	END
GO
DECLARE @RC INT
DECLARE @COD_REGISTRO_FERIADO INT
DECLARE  @NUMERO_FERIADO INT
DECLARE @MOTIVO_FERIADO VARCHAR(20)
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE  @FECHA_INICIO_V DATE
DECLARE  @FECHA_FIN_V DATE
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @MSJ VARCHAR(100)

SET @COD_REGISTRO_FERIADO= 111
SET @NUMERO_FERIADO=1
SET @MOTIVO_FERIADO= 'INCAPACIDAD'
SET @ID_ESTUDIANTE= 558735544
SET @FECHA_INICIO_V= '20230105'
SET @FECHA_FIN_V= '20230109'
SET @OBSERVACIONES= 'Me dieron la boleta de incapacidad en el doctor por virus.'


EXECUTE @RC= [DBO].[INSERTAR_FERIADO]
@COD_REGISTRO_FERIADO OUTPUT,
@NUMERO_FERIADO,
@MOTIVO_FERIADO,
@ID_ESTUDIANTE,
@FECHA_INICIO_V,
@FECHA_FIN_V,
@OBSERVACIONES,
@MSJ OUTPUT
PRINT 'El nuevo codigo de dia feriado del estudiante es ' + CAST(@COD_REGISTRO_FERIADO AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM FERIADOS_ESTUDIANTES
-----------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en los dias feriados de lo estudiantes
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_FERIADO(@COD_REGISTRO_FERIADO INT OUT,
										   @NUMERO_FERIADO INT,
										   @MOTIVO_FERIADO VARCHAR(20),
										   @ID_ESTUDIANTE VARCHAR(20),
										   @FECHA_INICIO_V DATE,
										   @FECHA_FIN_V DATE,
										   @OBSERVACIONES VARCHAR(200),
										   @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM FERIADOS_ESTUDIANTES WHERE CODIGO_REGISTRO_FERIADO=@COD_REGISTRO_FERIADO))
				BEGIN
					INSERT INTO FERIADOS_ESTUDIANTES 
					VALUES(@COD_REGISTRO_FERIADO,@NUMERO_FERIADO,@MOTIVO_FERIADO,@ID_ESTUDIANTE,@FECHA_INICIO_V,@FECHA_FIN_V,@OBSERVACIONES)
					SET @MSJ= 'DIA FERIADO DEL ESTUDIANTE INGRESADO CON EXITO'
					PRINT 'El nuevo codigo de dia feriado del estudiante es ' + CAST(@COD_REGISTRO_FERIADO AS VARCHAR)
				END
			ELSE 
				BEGIN
					UPDATE FERIADOS_ESTUDIANTES
					SET CODIGO_REGISTRO_FERIADO= @COD_REGISTRO_FERIADO, NUMERO_FERIADO=@NUMERO_FERIADO ,MOTIVO_FERIADO=@MOTIVO_FERIADO,
					ID_ESTUDIANTE= @ID_ESTUDIANTE,FECHA_INICIO_V=@FECHA_INICIO_V,FECHA_FIN_V=@FECHA_FIN_V,OBSERVACIONES=@OBSERVACIONES
					WHERE CODIGO_REGISTRO_FERIADO= @COD_REGISTRO_FERIADO 
					SET @MSJ= 'DIA FERIADO DEL ESTUDIANTE ACTUALIZADO CON EXITO'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @COD_REGISTRO_FERIADO INT
DECLARE  @NUMERO_FERIADO INT
DECLARE @MOTIVO_FERIADO VARCHAR(20)
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE  @FECHA_INICIO_V DATE
DECLARE  @FECHA_FIN_V DATE
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @MSJ VARCHAR(100)

SET @COD_REGISTRO_FERIADO= 111
SET @NUMERO_FERIADO=1
SET @MOTIVO_FERIADO= 'INCAPACIDAD'
SET @ID_ESTUDIANTE= 558735544
SET @FECHA_INICIO_V= '20230105'
SET @FECHA_FIN_V= '20230108'
SET @OBSERVACIONES= 'Me dieron la boleta de incapacidad en el doctor por virus.'


EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_FERIADO]
@COD_REGISTRO_FERIADO OUTPUT,
@NUMERO_FERIADO,
@MOTIVO_FERIADO,
@ID_ESTUDIANTE,
@FECHA_INICIO_V,
@FECHA_FIN_V,
@OBSERVACIONES,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM FERIADOS_ESTUDIANTES
-----------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro en los dias feriados de lo estudiantes
CREATE OR ALTER PROCEDURE BORRAR_FERIADO(@COD_REGISTRO_FERIADO INT OUT,
										              @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF ( EXISTS(SELECT 1 FROM FERIADOS_ESTUDIANTES WHERE CODIGO_REGISTRO_FERIADO=@COD_REGISTRO_FERIADO))
				BEGIN
					
					DELETE FROM FERIADOS_ESTUDIANTES
					WHERE  CODIGO_REGISTRO_FERIADO= @COD_REGISTRO_FERIADO

					SET @MSJ = 'FERIADO DEL ESTUDIANTE BORRADO SATISFACTORIAMENTE'
		        END
        COMMIT TRANSACTION
      END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @COD_REGISTRO_FERIADO INT
DECLARE @MSJ VARCHAR(100)

SET @COD_REGISTRO_FERIADO= 111

EXECUTE @RC= [DBO].[BORRAR_FERIADO]
@COD_REGISTRO_FERIADO OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM FERIADOS_ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostras el motivo de ausencia de los estudiantes y las observaciones
CREATE OR ALTER PROCEDURE DIAS_F_ESTUDIANTES
AS 
BEGIN
	SELECT FERIADOS_ESTUDIANTES.ID_ESTUDIANTE, CONCAT(NOMBRE_ESTUDIANTE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE ESTUDIANTE', MOTIVO_FERIADO,OBSERVACIONES
	FROM FERIADOS_ESTUDIANTES INNER JOIN ESTUDIANTES 
	ON   ESTUDIANTES.ID_ESTUDIANTE=FERIADOS_ESTUDIANTES.ID_ESTUDIANTE
END
EXECUTE [DBO].[DIAS_F_ESTUDIANTES]
------------------------------------------------------------------------------------------------------------------------------------------------
SELECT* FROM PROFESORES
SELECT * FROM CURSOS
--Insertar un nuevo horario en el curso
CREATE OR ALTER PROCEDURE INSERTAR_HORARIO(@NUMERO_HORARIO INT OUT,
										   @ID_PROFESOR VARCHAR(20),
										   @CODIGO_CURSO VARCHAR(20),
										   @HORA_INICIO TIME,
										   @HORA_FIN TIME,
										   @BLOQUES INT,
										   @FECHA DATE,
										   @MSJ VARCHAR(100) OUT)
AS 
	BEGIN
		INSERT INTO HORARIOS_CURSOS VALUES
		(@NUMERO_HORARIO,@ID_PROFESOR,@CODIGO_CURSO,@HORA_INICIO,@HORA_FIN,@BLOQUES,@FECHA)
		SET @MSJ= 'HORARIO DEL CURSO INGRESADO CON EXITO'
	END
GO
DECLARE @RC INT
DECLARE @NUMERO_HORARIO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @HORA_INICIO TIME
DECLARE @HORA_FIN TIME
DECLARE @BLOQUES INT
DECLARE @FECHA DATE
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_HORARIO= 13
SET @ID_PROFESOR= 118070444
SET @CODIGO_CURSO= '13Ñ13'
SET @HORA_INICIO= '07:00'
SET @HORA_FIN= '11:00'
SET @BLOQUES= 1
SET @FECHA= '20230105'


EXECUTE @RC= [DBO].[INSERTAR_HORARIO]
@NUMERO_HORARIO OUTPUT,
@ID_PROFESOR,
@CODIGO_CURSO,
@HORA_INICIO,
@HORA_FIN,
@BLOQUES,
@FECHA,
@MSJ OUTPUT

PRINT 'El codigo del nuevo horario es ' + CAST(@NUMERO_HORARIO AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM HORARIOS_CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un nuevo horario en el curso
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_HORARIO(@NUMERO_HORARIO INT OUT,
										   @ID_PROFESOR VARCHAR(20),
										   @CODIGO_CURSO VARCHAR(20),
										   @HORA_INICIO TIME,
										   @HORA_FIN TIME,
										   @BLOQUES INT,
										   @FECHA DATE,
										   @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
			BEGIN TRANSACTION
				IF (NOT EXISTS(SELECT 1 FROM HORARIOS_CURSOS WHERE NUMERO_HORARIO=@NUMERO_HORARIO))
					BEGIN
						INSERT INTO HORARIOS_CURSOS VALUES
						(@NUMERO_HORARIO,@ID_PROFESOR,@CODIGO_CURSO,@HORA_INICIO,@HORA_FIN,@BLOQUES,@FECHA)
						SET @MSJ= 'HORARIO DEL CURSO INGRESADO CON EXITO'
						PRINT 'El codigo del nuevo horario es ' + CAST(@NUMERO_HORARIO AS VARCHAR)
					END
				ELSE 
					BEGIN
						UPDATE HORARIOS_CURSOS
						SET NUMERO_HORARIO= @NUMERO_HORARIO,ID_PROFESOR= @ID_PROFESOR,CODIGO_CURSO=@CODIGO_CURSO,HORA_INICIO=@HORA_INICIO,
						HORA_FIN=@HORA_FIN,BLOQUES=@BLOQUES,FECHA= @FECHA
						WHERE NUMERO_HORARIO= @NUMERO_HORARIO 
						SET @MSJ= 'HORARIO ACTUALIZADO CORRECTAMENTE'
					END
			COMMIT TRANSACTION
	END TRY
BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO




DECLARE @RC INT
DECLARE @NUMERO_HORARIO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @HORA_INICIO TIME
DECLARE @HORA_FIN TIME
DECLARE @BLOQUES INT
DECLARE @FECHA DATE
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_HORARIO= 13
SET @ID_PROFESOR= 118070444
SET @CODIGO_CURSO= '13Ñ13'
SET @HORA_INICIO= '07:00'
SET @HORA_FIN= '12:00'
SET @BLOQUES= 1
SET @FECHA= '20230105'


EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_HORARIO]
@NUMERO_HORARIO OUTPUT,
@ID_PROFESOR,
@CODIGO_CURSO,
@HORA_INICIO,
@HORA_FIN,
@BLOQUES,
@FECHA,
@MSJ OUTPUT


PRINT @MSJ
GO

SELECT * FROM HORARIOS_CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un horario
CREATE OR ALTER PROCEDURE BORRAR_HORARIO(@NUMERO_HORARIO INT OUT,
										 @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
			BEGIN TRANSACTION
				IF ( EXISTS(SELECT 1 FROM HORARIOS_CURSOS WHERE NUMERO_HORARIO=@NUMERO_HORARIO))
					BEGIN
						DELETE FROM HORARIOS_CURSOS
					WHERE  NUMERO_HORARIO= @NUMERO_HORARIO

					SET @MSJ = 'HORARIO BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUMERO_HORARIO INT
DECLARE @MSJ VARCHAR(100)

SET @NUMERO_HORARIO= 13


EXECUTE @RC= [DBO].[BORRAR_HORARIO]
@NUMERO_HORARIO OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM HORARIOS_CURSOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostras los horarios de los cursos
CREATE OR ALTER PROCEDURE HORARIOS_DE_LOS_CURSOS
AS
BEGIN
	SELECT HORARIOS_CURSOS.CODIGO_CURSO, NOMBRE_CURSO,HORA_INICIO,HORA_FIN,BLOQUES,FECHA
	FROM HORARIOS_CURSOS INNER JOIN CURSOS
	ON HORARIOS_CURSOS.CODIGO_CURSO = CURSOS.CODIGO_CURSO
END
EXECUTE [DBO].[HORARIOS_DE_LOS_CURSOS]

------------------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM CURSOS
SELECT * FROM HORARIOS_CURSOS
SELECT * FROM PROFESORES
SELECT * FROM LABORATORIOS
SELECT * FROM DIAS_FUERA_PROFES
SELECT * FROM FERIADOS_ESTUDIANTES
SELECT * FROM CURSOS_ABIERTOS
--Insertar o actualizar una materia abierta nueva
CREATE OR ALTER PROCEDURE INSERTAR_CURSO_ABIERTO(@ID_CURSO_ABIERTO VARCHAR(20) OUT,
												 @COD_CURSO VARCHAR(20),
												 @NUMERO_HORARIO INT,
												 @ID_PROFESOR VARCHAR(20),
												 @CODIGO_LABORATORIO VARCHAR(20),
												 @CODIGO_REGISTRO_DIAS_FUERA VARCHAR(20),
												 @CODIGO_REGISTRO_FERIADO INT,
												 @MSJ VARCHAR(100)OUT)
AS
	BEGIN
		INSERT INTO CURSOS_ABIERTOS VALUES
		(@ID_CURSO_ABIERTO,@COD_CURSO,@NUMERO_HORARIO,@ID_PROFESOR,@CODIGO_LABORATORIO,@CODIGO_REGISTRO_DIAS_FUERA,@CODIGO_REGISTRO_FERIADO)
	END
GO
DECLARE @RC INT
DECLARE @ID_CURSO_ABIERTO VARCHAR(20)
DECLARE @COD_CURSO VARCHAR(20)
DECLARE @NUMERO_HORARIO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_LABORATORIO VARCHAR(20)
DECLARE @CODIGO_REGISTRO_DIAS_FUERA VARCHAR(20)
DECLARE @CODIGO_REGISTRO_FERIADO INT
DECLARE @MSJ VARCHAR(100)

SET @ID_CURSO_ABIERTO= '66K11'
SET @COD_CURSO= '13Ñ13'
SET @NUMERO_HORARIO= 13
SET @ID_PROFESOR= 118070444
SET @CODIGO_LABORATORIO= '11Q'
SET @CODIGO_REGISTRO_DIAS_FUERA = '11H11'
SET @CODIGO_REGISTRO_FERIADO= 111


EXECUTE @RC= [DBO].[INSERTAR_CURSO_ABIERTO]
@ID_CURSO_ABIERTO OUTPUT,
@COD_CURSO,
@NUMERO_HORARIO,
@ID_PROFESOR,
@CODIGO_LABORATORIO,
@CODIGO_REGISTRO_DIAS_FUERA,
@CODIGO_REGISTRO_FERIADO,
@MSJ OUTPUT

PRINT 'El codigo del nuevo curso es  ' + @ID_CURSO_ABIERTO
PRINT @MSJ
GO

SELECT * FROM CURSOS_ABIERTOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar una materia abierta nueva
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_CURSO_ABIERTO(@ID_CURSO_ABIERTO VARCHAR(20) OUT,
												 @COD_CURSO VARCHAR(20),
												 @NUMERO_HORARIO INT,
												 @ID_PROFESOR VARCHAR(20),
												 @CODIGO_LABORATORIO VARCHAR(20),
												 @CODIGO_REGISTRO_DIAS_FUERA VARCHAR(20),
												 @CODIGO_REGISTRO_FERIADO INT,
												 @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM CURSOS_ABIERTOS WHERE ID_CURSO_ABIERTO=@ID_CURSO_ABIERTO))
				BEGIN
					INSERT INTO CURSOS_ABIERTOS VALUES
					(@ID_CURSO_ABIERTO,@COD_CURSO,@NUMERO_HORARIO,@ID_PROFESOR,@CODIGO_LABORATORIO,@CODIGO_REGISTRO_DIAS_FUERA,@CODIGO_REGISTRO_FERIADO)
					PRINT 'El codigo del nuevo curso es  ' + @ID_CURSO_ABIERTO
				END
			ELSE
				BEGIN
					UPDATE CURSOS_ABIERTOS
					SET ID_CURSO_ABIERTO= @ID_CURSO_ABIERTO,CODIGO_CURSO=@COD_CURSO,NUMERO_HORARIO=@NUMERO_HORARIO,ID_PROFESOR=@ID_PROFESOR,
					CODIGO_LABORATORIO=@CODIGO_LABORATORIO,CODIGO_REGISTRO_DIAS_FUERA= @CODIGO_REGISTRO_DIAS_FUERA,
					CODIGO_REGISTRO_FERIADO= @CODIGO_REGISTRO_FERIADO
					WHERE ID_CURSO_ABIERTO= @ID_CURSO_ABIERTO 
					SET @MSJ= 'CURSO ABIERTO ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @ID_CURSO_ABIERTO VARCHAR(20)
DECLARE @COD_CURSO VARCHAR(20)
DECLARE @NUMERO_HORARIO INT
DECLARE @ID_PROFESOR VARCHAR(20)
DECLARE @CODIGO_LABORATORIO VARCHAR(20)
DECLARE @CODIGO_REGISTRO_DIAS_FUERA VARCHAR(20)
DECLARE @CODIGO_REGISTRO_FERIADO INT
DECLARE @MSJ VARCHAR(100)

SET @ID_CURSO_ABIERTO= '66L11'
SET @COD_CURSO= '13Ñ13'
SET @NUMERO_HORARIO= 13
SET @ID_PROFESOR= 118070444
SET @CODIGO_LABORATORIO= '11Q'
SET @CODIGO_REGISTRO_DIAS_FUERA = '11H11'
SET @CODIGO_REGISTRO_FERIADO= 111


EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_CURSO_ABIERTO]
@ID_CURSO_ABIERTO OUTPUT,
@COD_CURSO,
@NUMERO_HORARIO,
@ID_PROFESOR,
@CODIGO_LABORATORIO,
@CODIGO_REGISTRO_DIAS_FUERA,
@CODIGO_REGISTRO_FERIADO,
@MSJ OUTPUT


PRINT @MSJ
GO

SELECT * FROM CURSOS_ABIERTOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar una materia abierta nueva
CREATE OR ALTER PROCEDURE BORRAR_CURSO_ABIERTO(@ID_CURSO_ABIERTO VARCHAR(20) OUT,
											   @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM CURSOS_ABIERTOS WHERE ID_CURSO_ABIERTO=@ID_CURSO_ABIERTO))
				BEGIN
					DELETE FROM CURSOS_ABIERTOS
					WHERE  ID_CURSO_ABIERTO= @ID_CURSO_ABIERTO

					SET @MSJ = 'CURSO ABIERTO BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @ID_CURSO_ABIERTO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @ID_CURSO_ABIERTO= '66L11'


EXECUTE @RC= [DBO].[BORRAR_CURSO_ABIERTO]
@ID_CURSO_ABIERTO OUTPUT,
@MSJ OUTPUT


PRINT @MSJ
GO

SELECT * FROM CURSOS_ABIERTOS
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostras el curso abierto su duracion,costo,aula y horario
CREATE OR ALTER PROCEDURE CURSO_ABIERTO
AS
BEGIN
	SELECT CURSOS_ABIERTOS.ID_CURSO_ABIERTO,NOMBRE_CURSO,HORA_INICIO,HORA_FIN,BLOQUES,FECHA,COSTO,DURACION_HORAS,LABORATORIOS.CODIGO_LABORATORIO,NUMERO_AULA
	FROM HORARIOS_CURSOS INNER JOIN CURSOS
	ON HORARIOS_CURSOS.CODIGO_CURSO = CURSOS.CODIGO_CURSO INNER JOIN CURSOS_ABIERTOS
	ON CURSOS.CODIGO_CURSO= CURSOS_ABIERTOS.CODIGO_CURSO INNER JOIN LABORATORIOS 
	ON CURSOS_ABIERTOS.CODIGO_LABORATORIO = LABORATORIOS.CODIGO_LABORATORIO
END

EXECUTE [DBO].[CURSO_ABIERTO]

------------------------------------------------------------------------------------------------------------------------------------------------
SELECT*FROM ESTUDIANTES
SELECT *FROM CURSOS
--Insertar un nuevo record academico de un estudiante
CREATE OR ALTER PROCEDURE INSERTAR_RECORD(@CODIGO_RECORD VARCHAR(20) OUT,
										  @ID_ESTUDIANTE VARCHAR(20),
										  @CODIGO_CURSO VARCHAR(20),
										  @NOTA_P_1 FLOAT,
										  @NOTA_P_2 FLOAT,
										  @NOTA_EXAMEN FLOAT,
										  @NOTA_FINAL FLOAT,
										  @ESTADO VARCHAR(20),
										  @MSJ VARCHAR(100)OUT )
AS 
	BEGIN
		INSERT INTO RECORD_ACADEMICO_ESTUDIANTES VALUES
		(@CODIGO_RECORD,@ID_ESTUDIANTE,@CODIGO_CURSO,@NOTA_P_1,@NOTA_P_2,@NOTA_EXAMEN,@NOTA_FINAL,@ESTADO)
	END
GO
DECLARE @RC INT
DECLARE @CODIGO_RECORD VARCHAR(20)
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @NOTA_P_1 FLOAT
DECLARE @NOTA_P_2 FLOAT
DECLARE @NOTA_EXAMEN FLOAT
DECLARE @NOTA_FINAL FLOAT
DECLARE @ESTADO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_RECORD= 2014 
SET @ID_ESTUDIANTE= 558735544
SET @CODIGO_CURSO= '13Ñ13'
SET @NOTA_P_1= 15
SET @NOTA_P_2= 30
SET @NOTA_EXAMEN= 20
SET @NOTA_FINAL= 65
SET @ESTADO='REPROBADO'

EXECUTE @RC= [DBO].[INSERTAR_RECORD]
@CODIGO_RECORD OUTPUT, 
@ID_ESTUDIANTE,
@CODIGO_CURSO,
@NOTA_P_1,
@NOTA_P_2,
@NOTA_EXAMEN,
@NOTA_FINAL,
@ESTADO,
@MSJ OUTPUT
PRINT 'El nuevo registro academico del estudiante es ' + @CODIGO_RECORD
PRINT @MSJ
GO

SELECT * FROM RECORD_ACADEMICO_ESTUDIANTES
-------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un nuevo record academico de un estudiante
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_RECORD(@CODIGO_RECORD VARCHAR(20) OUT,
										  @ID_ESTUDIANTE VARCHAR(20),
										  @CODIGO_CURSO VARCHAR(20),
										  @NOTA_P_1 FLOAT,
										  @NOTA_P_2 FLOAT,
										  @NOTA_EXAMEN FLOAT,
										  @NOTA_FINAL FLOAT,
										  @ESTADO VARCHAR(20),
										  @MSJ VARCHAR(100)OUT )
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM RECORD_ACADEMICO_ESTUDIANTES WHERE CODIGO_RECORD=@CODIGO_RECORD))
				BEGIN
					INSERT INTO RECORD_ACADEMICO_ESTUDIANTES VALUES
					(@CODIGO_RECORD,@ID_ESTUDIANTE,@CODIGO_CURSO,@NOTA_P_1,@NOTA_P_2,@NOTA_EXAMEN,@NOTA_FINAL,@ESTADO)
					PRINT 'El nuevo registro academico del estudiante es ' + @CODIGO_RECORD
				END
			ELSE 
				BEGIN
					UPDATE RECORD_ACADEMICO_ESTUDIANTES
					SET CODIGO_RECORD=@CODIGO_RECORD,ID_ESTUDIANTE=@ID_ESTUDIANTE,CODIGO_CURSO=@CODIGO_CURSO,NOTA_PROYECTO1=@NOTA_P_1,
					NOTA_PROYECTO2=@NOTA_P_2,NOTA_EXAMEN= @NOTA_EXAMEN,NOTA_FINAL=@NOTA_FINAL, ESTADO=@ESTADO
					WHERE CODIGO_RECORD= @CODIGO_RECORD 
					SET @MSJ='REGISTRO ACADEMICO ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
  
DECLARE @RC INT
DECLARE @CODIGO_RECORD VARCHAR(20)
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @CODIGO_CURSO VARCHAR(20)
DECLARE @NOTA_P_1 FLOAT
DECLARE @NOTA_P_2 FLOAT
DECLARE @NOTA_EXAMEN FLOAT
DECLARE @NOTA_FINAL FLOAT
DECLARE @ESTADO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_RECORD= 2014 
SET @ID_ESTUDIANTE= 558735544
SET @CODIGO_CURSO= '13Ñ13'
SET @NOTA_P_1= 15
SET @NOTA_P_2= 34
SET @NOTA_EXAMEN= 20
SET @NOTA_FINAL= 69
SET @ESTADO='REPROBADO'

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_RECORD]
@CODIGO_RECORD OUTPUT, 
@ID_ESTUDIANTE,
@CODIGO_CURSO,
@NOTA_P_1,
@NOTA_P_2,
@NOTA_EXAMEN,
@NOTA_FINAL,
@ESTADO,
@MSJ OUTPUT
PRINT @MSJ
GO

SELECT * FROM RECORD_ACADEMICO_ESTUDIANTES
-------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un nuevo record academico de un estudiante
CREATE OR ALTER PROCEDURE BORRAR_RECORD(@CODIGO_RECORD VARCHAR(20) OUT,
													 @MSJ VARCHAR(100)OUT )
AS 
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM RECORD_ACADEMICO_ESTUDIANTES WHERE CODIGO_RECORD=@CODIGO_RECORD))
				BEGIN
					DELETE FROM RECORD_ACADEMICO_ESTUDIANTES
					WHERE  CODIGO_RECORD= @CODIGO_RECORD

					
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @CODIGO_RECORD VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @CODIGO_RECORD= 2014 

EXECUTE @RC= [DBO].[BORRAR_RECORD]
@CODIGO_RECORD OUTPUT, 
@MSJ OUTPUT
PRINT @MSJ
GO

SELECT * FROM RECORD_ACADEMICO_ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar el estudiante el curso y su estado
CREATE OR ALTER PROCEDURE ESTUDIANTES_ESTADO
AS
BEGIN
	SELECT ESTUDIANTES.ID_ESTUDIANTE,CONCAT(NOMBRE_ESTUDIANTE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE ESTUDIANTE',NOMBRE_CURSO,ESTADO 
	FROM ESTUDIANTES INNER JOIN RECORD_ACADEMICO_ESTUDIANTES 
	ON ESTUDIANTES.ID_ESTUDIANTE = RECORD_ACADEMICO_ESTUDIANTES.ID_ESTUDIANTE INNER JOIN CURSOS
	ON RECORD_ACADEMICO_ESTUDIANTES.CODIGO_CURSO= CURSOS.CODIGO_CURSO 
END
EXECUTE [DBO].[ESTUDIANTES_ESTADO]
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en el matriculas
CREATE OR ALTER PROCEDURE INSERTAR_MATRICULA(@NUM_MATRICULA INT OUT,
											 @ID_ESTUDIANTE VARCHAR(20),
											 @UNIVERSIDAD VARCHAR(50),
											 @FECHA_HORA_MATRICULA DATETIME,
											 @ESTADO_M VARCHAR(20),
											 @MSJ VARCHAR(100)OUT)
AS
	BEGIN
		INSERT INTO ENCABEZADO_MATRICULAS VALUES
		(@NUM_MATRICULA, @ID_ESTUDIANTE, @UNIVERSIDAD, @FECHA_HORA_MATRICULA,@ESTADO_M )
		SET @MSJ= 'MATRICULA INGRESADA CON EXITO'
	END
GO

DECLARE @RC INT
DECLARE @NUM_MATRICULA INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @UNIVERSIDAD VARCHAR(50)
DECLARE @FECHA_HORA_MATRICULA DATETIME
DECLARE @ESTADO_M VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_MATRICULA=11
SET @ID_ESTUDIANTE= 558735544

SET @UNIVERSIDAD= 'FUENTE DEL CONOCIMIENTO'
SET @FECHA_HORA_MATRICULA= '20211026 17:00'
SET @ESTADO_M= 'INACTIVO'

EXECUTE @RC= [DBO].[INSERTAR_MATRICULA]
@NUM_MATRICULA OUTPUT,
@ID_ESTUDIANTE,
@UNIVERSIDAD,
@FECHA_HORA_MATRICULA,
@ESTADO_M,
@MSJ OUTPUT
PRINT 'El numero de la matricula nueva es  ' + CAST(@NUM_MATRICULA AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM ENCABEZADO_MATRICULAS
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en el matriculas
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_MATRICULA(@NUM_MATRICULA INT OUT,
											 @ID_ESTUDIANTE VARCHAR(20),
											 @UNIVERSIDAD VARCHAR(50),
											 @FECHA_HORA_MATRICULA DATETIME,
											 @ESTADO_M VARCHAR(20),
											 @MSJ VARCHAR(100)OUT)
AS
BEGIN TRY
		BEGIN TRANSACTION
	IF (NOT EXISTS(SELECT 1 FROM ENCABEZADO_MATRICULAS WHERE NUMERO_MATRICULA=@NUM_MATRICULA))
		BEGIN
			INSERT INTO ENCABEZADO_MATRICULAS VALUES
			(@NUM_MATRICULA, @ID_ESTUDIANTE, @UNIVERSIDAD, @FECHA_HORA_MATRICULA,@ESTADO_M )
			SET @MSJ= 'MATRICULA INGRESADA CON EXITO'
			PRINT 'El numero de la matricula nueva es  ' + CAST(@NUM_MATRICULA AS VARCHAR)
		END
	ELSE
		BEGIN
					UPDATE ENCABEZADO_MATRICULAS
					SET NUMERO_MATRICULA= @NUM_MATRICULA,ID_ESTUDIANTE=@ID_ESTUDIANTE,UNIVERSIDAD=@UNIVERSIDAD,FECHA_HORA_MATRICULA=
					@FECHA_HORA_MATRICULA, ESTADO_M= @ESTADO_M
					WHERE NUMERO_MATRICULA= @NUM_MATRICULA 
					SET @MSJ= 'MATRICULA ACTUALIZADO CORRECTAMENTE'
		END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUM_MATRICULA INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @UNIVERSIDAD VARCHAR(50)
DECLARE @FECHA_HORA_MATRICULA DATETIME
DECLARE @ESTADO_M VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_MATRICULA=11
SET @ID_ESTUDIANTE= 558735544

SET @UNIVERSIDAD= 'FUENTE DEL CONOCIMIENTO'
SET @FECHA_HORA_MATRICULA= '20211026 17:10'
SET @ESTADO_M= 'INACTIVO'

EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_MATRICULA]
@NUM_MATRICULA OUTPUT,
@ID_ESTUDIANTE,
@UNIVERSIDAD,
@FECHA_HORA_MATRICULA,
@ESTADO_M,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM ENCABEZADO_MATRICULAS
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro en el matriculas
CREATE OR ALTER PROCEDURE BORRAR_MATRICULA(@NUM_MATRICULA INT OUT,
											            @MSJ VARCHAR(100)OUT)
AS
BEGIN TRY
		BEGIN TRANSACTION
	IF (EXISTS(SELECT 1 FROM ENCABEZADO_MATRICULAS WHERE NUMERO_MATRICULA=@NUM_MATRICULA))
		
			BEGIN
					DELETE FROM ENCABEZADO_MATRICULAS
					WHERE  NUMERO_MATRICULA= @NUM_MATRICULA

					SET @MSJ = 'MATRICULA BORRADA SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUM_MATRICULA INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_MATRICULA=11


EXECUTE @RC= [DBO].[BORRAR_MATRICULA]	
@NUM_MATRICULA OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM ENCABEZADO_MATRICULAS
------------------------------------------------------------------------------------------------------------------------------------------------
--Mostrar los estudiantes que tienen matriculas activas
CREATE OR ALTER PROCEDURE  MATRICULAS_ACTIVAS
AS
BEGIN
	SELECT NUMERO_MATRICULA,CONCAT(NOMBRE_ESTUDIANTE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE ESTUDIANTE',ESTADO_M
	FROM ENCABEZADO_MATRICULAS INNER JOIN ESTUDIANTES
	ON ENCABEZADO_MATRICULAS.ID_ESTUDIANTE= ESTUDIANTES.ID_ESTUDIANTE
	WHERE ESTADO_M= 'ACTIVO'
END
EXECUTE  [DBO].[MATRICULAS_ACTIVAS]	

------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un registro en pagos de los estudiantes
CREATE OR ALTER PROCEDURE INSERTAR_PAGO_EST(@NUM_R_PAGO INT OUT,
											@ID_ESTUDIANTE VARCHAR(20),
											@NUMERO_MATRICULA INT,
											@PAGO_TOTAL FLOAT,
											@REALIZACION_PAGO VARCHAR(20),
											@MSJ VARCHAR(20) OUT)
AS
	BEGIN 
		INSERT INTO PAGO_ESTUDIANTES VALUES
		(@NUM_R_PAGO,@ID_ESTUDIANTE,@NUMERO_MATRICULA,@PAGO_TOTAL,@REALIZACION_PAGO)
		SET @MSJ= 'PAGO INGRESADO CORRECTAMENTE'
	END
GO
DECLARE @RC INT
DECLARE @NUM_R_PAGO INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @NUMERO_MATRICULA INT
DECLARE @PAGO_TOTAL FLOAT
DECLARE @REALIZACION_PAGO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_R_PAGO=121
SET @ID_ESTUDIANTE= 558735544
SET @NUMERO_MATRICULA= 11
SET @PAGO_TOTAL= 250000
SET @REALIZACION_PAGO='REALIZADO'



EXECUTE @RC= [DBO].[INSERTAR_PAGO_EST]
@NUM_R_PAGO OUTPUT,
@ID_ESTUDIANTE,
@NUMERO_MATRICULA,
@PAGO_TOTAL,
@REALIZACION_PAGO,
@MSJ OUTPUT
PRINT 'El nuevo numero de registro de pago es ' + CAST(@NUM_R_PAGO AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM PAGO_ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un registro en pagos de los estudiantes
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_PAGO_EST(@NUM_R_PAGO INT OUT,
											@ID_ESTUDIANTE VARCHAR(20),
											@NUMERO_MATRICULA INT,
											@PAGO_TOTAL FLOAT,
											@REALIZACION_PAGO VARCHAR(20),
											@MSJ VARCHAR(20) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM PAGO_ESTUDIANTES WHERE NUMERO_REGISTRO_PAGO=@NUM_R_PAGO))
				BEGIN
					INSERT INTO PAGO_ESTUDIANTES VALUES
					(@NUM_R_PAGO,@ID_ESTUDIANTE,@NUMERO_MATRICULA,@PAGO_TOTAL,@REALIZACION_PAGO)
					SET @MSJ= 'PAGO INGRESADO CORRECTAMENTE'
					PRINT 'El nuevo numero de registro de pago es ' + CAST(@NUM_R_PAGO AS VARCHAR)
				END
			ELSE 
				BEGIN
					UPDATE PAGO_ESTUDIANTES
					SET NUMERO_REGISTRO_PAGO= @NUM_R_PAGO,ID_ESTUDIANTE=@ID_ESTUDIANTE,NUMERO_MATRICULA=@NUMERO_MATRICULA,PAGO_TOTAL=
					@PAGO_TOTAL,REALIZACION_PAGO=@REALIZACION_PAGO
					WHERE NUMERO_REGISTRO_PAGO= @NUM_R_PAGO 
					SET @MSJ= 'PAGO DEL ESTUDIANTE ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUM_R_PAGO INT
DECLARE @ID_ESTUDIANTE VARCHAR(20)
DECLARE @NUMERO_MATRICULA INT
DECLARE @PAGO_TOTAL FLOAT
DECLARE @REALIZACION_PAGO VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_R_PAGO=121
SET @ID_ESTUDIANTE= 558735544
SET @NUMERO_MATRICULA= 11
SET @PAGO_TOTAL= 250000
SET @REALIZACION_PAGO='NO REALIZADO'



EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_PAGO_EST]
@NUM_R_PAGO OUTPUT,
@ID_ESTUDIANTE,
@NUMERO_MATRICULA,
@PAGO_TOTAL,
@REALIZACION_PAGO,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM PAGO_ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Borrar un registro en pagos de los estudiantes
CREATE OR ALTER PROCEDURE BORRAR_PAGO_EST(@NUM_R_PAGO INT OUT,
										  @MSJ VARCHAR(20) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF ( EXISTS(SELECT 1 FROM PAGO_ESTUDIANTES WHERE NUMERO_REGISTRO_PAGO=@NUM_R_PAGO))
				BEGIN
					DELETE FROM PAGO_ESTUDIANTES
					WHERE  NUMERO_REGISTRO_PAGO= @NUM_R_PAGO

					SET @MSJ = 'PAGO DEL ESTUDIANTE BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @NUM_R_PAGO INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_R_PAGO=121


EXECUTE @RC= [DBO].[BORRAR_PAGO_EST]
@NUM_R_PAGO OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM PAGO_ESTUDIANTES
------------------------------------------------------------------------------------------------------------------------------------------------
--Seleccionar los estudiantes que han realizado los pagos
CREATE OR ALTER PROCEDURE PAGOS_REALIZADOS
AS
BEGIN
	SELECT PAGO_ESTUDIANTES.ID_ESTUDIANTE, CONCAT(NOMBRE_ESTUDIANTE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE ESTUDIANTE', REALIZACION_PAGO
	FROM PAGO_ESTUDIANTES INNER JOIN ESTUDIANTES 
	ON PAGO_ESTUDIANTES.ID_ESTUDIANTE = ESTUDIANTES.ID_ESTUDIANTE
	WHERE REALIZACION_PAGO= 'REALIZADO'
END
EXECUTE [DBO].[PAGOS_REALIZADOS]
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar un nuevo registro en detalles de la matricula
CREATE OR ALTER PROCEDURE INSERTAR_D_MATRICULA(@NUM_RECIBO INT OUT,
											   @NUMERO_MATRICULA INT,
											   @ID_CURSO_ABIERTO VARCHAR(20),
											   @CODIGO_RECORD VARCHAR(20),
											   @NUMER_R_PAGO INT,
											   @OBSERVACIONES VARCHAR(200),
											   @VALIDACION_M VARCHAR(20),
											   @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		INSERT INTO DETALLES_MATRICULA VALUES
		(@NUM_RECIBO,@NUMERO_MATRICULA,@ID_CURSO_ABIERTO,@CODIGO_RECORD, @NUMER_R_PAGO, @OBSERVACIONES, @VALIDACION_M)
		SET @MSJ= 'DETALLES DE MATRICULA INGRESADOS CON EXITO'
	END
GO
DECLARE @RC INT
DECLARE @NUM_RECIBO INT
DECLARE @NUMERO_MATRICULA INT
DECLARE @ID_CURSO_ABIERTO VARCHAR(20)
DECLARE @CODIGO_RECORD VARCHAR(20)
DECLARE @NUMER_R_PAGO INT
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @VALIDACION_M VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_RECIBO=100012
SET @NUMERO_MATRICULA=11
SET @ID_CURSO_ABIERTO= '66K11'
SET @CODIGO_RECORD= 2014
SET @NUMER_R_PAGO= 121
SET @OBSERVACIONES= 'El estudiante va a repetir la materia'
SET @VALIDACION_M= 'SI'


EXECUTE @RC= [DBO].[INSERTAR_D_MATRICULA]
@NUM_RECIBO OUTPUT,
@NUMERO_MATRICULA,
@ID_CURSO_ABIERTO,
@CODIGO_RECORD,
@NUMER_R_PAGO,
@OBSERVACIONES,
@VALIDACION_M,
@MSJ OUTPUT
PRINT 'El numero de recibo de la nueva matricula es ' + CAST(@NUM_RECIBO AS VARCHAR)
PRINT @MSJ
GO

SELECT * FROM DETALLES_MATRICULA
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un nuevo registro en detalles de la matricula
CREATE OR ALTER PROCEDURE INSERTAR_ACTUALIZAR_D_MATRICULA(@NUM_RECIBO INT OUT,
											   @NUMERO_MATRICULA INT,
											   @ID_CURSO_ABIERTO VARCHAR(20),
											   @CODIGO_RECORD VARCHAR(20),
											   @NUMER_R_PAGO INT,
											   @OBSERVACIONES VARCHAR(200),
											   @VALIDACION_M VARCHAR(20),
											   @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (NOT EXISTS(SELECT 1 FROM DETALLES_MATRICULA WHERE NUMERO_RECIBO=@NUM_RECIBO))
				BEGIN
					INSERT INTO DETALLES_MATRICULA VALUES
					(@NUM_RECIBO,@NUMERO_MATRICULA,@ID_CURSO_ABIERTO,@CODIGO_RECORD, @NUMER_R_PAGO, @OBSERVACIONES, @VALIDACION_M)
					SET @MSJ= 'DETALLES DE MATRICULA INGRESADOS CON EXITO'
					PRINT 'El numero de recibo de la nueva matricula es ' + CAST(@NUM_RECIBO AS VARCHAR)
				END
			ELSE
				BEGIN
					UPDATE DETALLES_MATRICULA
					SET NUMERO_RECIBO= @NUM_RECIBO,NUMERO_MATRICULA=@NUMERO_MATRICULA,ID_CURSO_ABIERTO=@ID_CURSO_ABIERTO,CODIGO_RECORD=
					@CODIGO_RECORD,NUMERO_REGISTRO_PAGO=@NUMER_R_PAGO,OBSERVACIONES= @OBSERVACIONES,VALIDACION_DE_MATRICULA= @VALIDACION_M
					WHERE NUMERO_RECIBO= @NUM_RECIBO 
					SET @MSJ= 'DETALLE DE MATRICULA ACTUALIZADO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO
DECLARE @RC INT
DECLARE @NUM_RECIBO INT
DECLARE @NUMERO_MATRICULA INT
DECLARE @ID_CURSO_ABIERTO VARCHAR(20)
DECLARE @CODIGO_RECORD VARCHAR(20)
DECLARE @NUMER_R_PAGO INT
DECLARE @OBSERVACIONES VARCHAR(200)
DECLARE @VALIDACION_M VARCHAR(20)
DECLARE @MSJ VARCHAR(100)

SET @NUM_RECIBO=100012
SET @NUMERO_MATRICULA=11
SET @ID_CURSO_ABIERTO= '66K11'
SET @CODIGO_RECORD= 2014
SET @NUMER_R_PAGO= 121
SET @OBSERVACIONES= 'La estudiante va a repetir la materia'
SET @VALIDACION_M= 'SI'


EXECUTE @RC= [DBO].[INSERTAR_ACTUALIZAR_D_MATRICULA]
@NUM_RECIBO OUTPUT,
@NUMERO_MATRICULA,
@ID_CURSO_ABIERTO,
@CODIGO_RECORD,
@NUMER_R_PAGO,
@OBSERVACIONES,
@VALIDACION_M,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM DETALLES_MATRICULA
------------------------------------------------------------------------------------------------------------------------------------------------
--Insertar o actualizar un nuevo registro en detalles de la matricula
CREATE OR ALTER PROCEDURE BORRAR_D_MATRICULA(@NUM_RECIBO INT OUT,
														  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF ( EXISTS(SELECT 1 FROM DETALLES_MATRICULA WHERE NUMERO_RECIBO=@NUM_RECIBO))
				BEGIN
					DELETE FROM DETALLES_MATRICULA
					WHERE  NUMERO_RECIBO = @NUM_RECIBO

					SET @MSJ = 'DETALLE DE MATRICULA BORRADO SATISFACTORIAMENTE'
		END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK
	SET @MSJ=ERROR_MESSAGE()
END CATCH
GO

DECLARE @RC INT
DECLARE @NUM_RECIBO INT
DECLARE @MSJ VARCHAR(100)

SET @NUM_RECIBO=100012

EXECUTE @RC= [DBO].[BORRAR_D_MATRICULA]
@NUM_RECIBO OUTPUT,
@MSJ OUTPUT

PRINT @MSJ
GO

SELECT * FROM DETALLES_MATRICULA
------------------------------------------------------------------------------------------------------------------------------------------------
--Estudiantes que les validaron la matricula
CREATE OR ALTER PROCEDURE VALIDACION_MATRICULA_ESTUDIANTES
AS
BEGIN
	SELECT ESTUDIANTES.ID_ESTUDIANTE, CONCAT(NOMBRE_ESTUDIANTE, '  ', APELLIDO1,'  ',APELLIDO2) AS 'NOMBRE ESTUDIANTE', VALIDACION_DE_MATRICULA
	FROM DETALLES_MATRICULA INNER JOIN ENCABEZADO_MATRICULAS
	ON DETALLES_MATRICULA.NUMERO_MATRICULA= ENCABEZADO_MATRICULAS.NUMERO_MATRICULA INNER JOIN ESTUDIANTES
	ON ENCABEZADO_MATRICULAS.ID_ESTUDIANTE= ESTUDIANTES.ID_ESTUDIANTE
	WHERE VALIDACION_DE_MATRICULA = 'SI'
END
EXECUTE [DBO].[VALIDACION_MATRICULA_ESTUDIANTES]
------------------------------------------------------------------------------------------------------------------------------------------------
--Pagos a los profesores CON HORAS EXTRA
CREATE OR ALTER PROCEDURE PAGOS_DE_LOS_PROFESORES_CON_HORAS_EXTRA(@ID_PROFESOR VARCHAR(20) OUT ) 
AS
	BEGIN
		DECLARE @NUM_REGISTRO_HORAS INT
		DECLARE @CANT_REGISTROS INT
		DECLARE @HORA_EXTRA_I TIME
		DECLARE @HORA_EXTRA_F TIME
		DECLARE @TOTAL_H_EXTRAS INT
		DECLARE @PAGO_POR_HORA_EXTRA INT
		DECLARE @MONTO_H_ORDIN FLOAT
		DECLARE @MONTO_H_EXTRA FLOAT
		DECLARE @SUB_TOTAL FLOAT
		DECLARE @SALARIO_NETO FLOAT
		DECLARE @TOTAL_H INT
		DECLARE @PAGO_POR_GRADO_CERTIFICACION INT
		DECLARE @MONTO_TOTAL FLOAT
		DECLARE @DEDUCCIONES FLOAT
		DECLARE @SALARIO_BRUTO FLOAT
		DECLARE @NOMBRE_PROFESOR VARCHAR(150)
		DECLARE @HORA_ENTRADA TIME
		DECLARE @HORA_SALIDA TIME

		SET @PAGO_POR_HORA_EXTRA= 26700
		SET @PAGO_POR_GRADO_CERTIFICACION= 17800 --Esta cantidad es para los profesores bachilleres (reglas de negocio)
		SET @DEDUCCIONES= 0.10--Ya que es un 10%

		

		SELECT  @HORA_ENTRADA= HORA_ENTRADA,@HORA_SALIDA=HORA_SALIDA,@HORA_EXTRA_I=HORAS_EXTRA_INICIO,
		@HORA_EXTRA_F=HORAS_EXTRA_FIN,@NUM_REGISTRO_HORAS= NUMERO_REGISTRO_HORAS FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR-- Se les asignan los valores respectivos
		SET @CANT_REGISTROS= (SELECT COUNT(@NUM_REGISTRO_HORAS) FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR) -- PARA QUE CUENTE LA CANTIDAD DE REGISTROS, YA QUE ES UN REGISTRO POR DIA LABORADO
		SET @TOTAL_H= (SELECT DATEDIFF(HH,@HORA_ENTRADA,@HORA_SALIDA) FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR) 
		SET @TOTAL_H_EXTRAS= (SELECT DATEDIFF(HH,@HORA_EXTRA_I,@HORA_EXTRA_F)FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR)
		SET @MONTO_H_ORDIN= (@TOTAL_H*@PAGO_POR_GRADO_CERTIFICACION)
		SET @MONTO_H_EXTRA= (@TOTAL_H_EXTRAS * @PAGO_POR_HORA_EXTRA)
		SET @MONTO_TOTAL= (@MONTO_H_ORDIN+@MONTO_H_EXTRA)
		SET @SALARIO_BRUTO= @MONTO_TOTAL * @CANT_REGISTROS
		SET @SUB_TOTAL= @SALARIO_BRUTO * @DEDUCCIONES
		SET @SALARIO_NETO= @SALARIO_BRUTO-@SUB_TOTAL
		
		SET @NOMBRE_PROFESOR= (SELECT (NOMBRE + ' ' + APELLIDO1 + ' '+ APELLIDO2) FROM PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR)

		PRINT 'EL NOMBRE DEL PROFESOR ES ' + @NOMBRE_PROFESOR + ' ' + ' Y SU SALARIO NETO ES ' + CAST(@SALARIO_NETO AS VARCHAR)
	END
GO
DECLARE @ID_PROFESOR VARCHAR(20)
SET @ID_PROFESOR= 268432657 --Este es un profesor que trabajo horas extra
EXECUTE [dbo].[PAGOS_DE_LOS_PROFESORES_CON_HORAS_EXTRA]
@ID_PROFESOR OUT 

------------------------------------------------------------------------------------------------------------------------------------------------
--Pagos a los profesores SIN HORAS EXTRA
 CREATE OR ALTER PROCEDURE PAGOS_DE_LOS_PROFESORES_SIN_HORAS_EXTRA(@ID_PROFESOR VARCHAR(20) OUT ) 
AS
	BEGIN --Variables necesarias
		DECLARE @NUM_REGISTRO_HORAS INT
		DECLARE @CANT_REGISTROS INT
		DECLARE @MONTO_H_ORDIN FLOAT
		DECLARE @SUB_TOTAL FLOAT
		DECLARE @SALARIO_NETO FLOAT
		DECLARE @TOTAL_H INT
		DECLARE @PAGO_POR_GRADO_CERTIFICACION INT
		DECLARE @MONTO_TOTAL FLOAT
		DECLARE @DEDUCCIONES FLOAT
		DECLARE @SALARIO_BRUTO FLOAT
		DECLARE @NOMBRE_PROFESOR VARCHAR(150)
		DECLARE @HORA_ENTRADA TIME
		DECLARE @HORA_SALIDA TIME

		
		SET @PAGO_POR_GRADO_CERTIFICACION= 17800 --Esta cantidad es para los profesores bachilleres(reglas de negocio)
		SET @DEDUCCIONES= 0.10 -- ya que es un 10%

		

		SELECT  @HORA_ENTRADA= HORA_ENTRADA,@HORA_SALIDA=HORA_SALIDA,@NUM_REGISTRO_HORAS= NUMERO_REGISTRO_HORAS FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR --Se les asignan los valores
		SET @CANT_REGISTROS= (SELECT COUNT(@NUM_REGISTRO_HORAS) FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR) -- PARA QUE CUENTE LA CANTIDAD DE REGISTROS, YA QUE ES UN REGISTRO POR DIA LABORADO
		SET @TOTAL_H= (SELECT DATEDIFF(HH,@HORA_ENTRADA,@HORA_SALIDA) FROM HORAS_LABORADAS_PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR) 
		SET @MONTO_H_ORDIN= (@TOTAL_H*@PAGO_POR_GRADO_CERTIFICACION)
		SET @SALARIO_BRUTO= @MONTO_TOTAL * @CANT_REGISTROS
		SET @SUB_TOTAL= @SALARIO_BRUTO * @DEDUCCIONES
		SET @SALARIO_NETO= @SALARIO_BRUTO-@SUB_TOTAL
		
		SET @NOMBRE_PROFESOR= (SELECT (NOMBRE + ' ' + APELLIDO1 + ' '+ APELLIDO2) FROM PROFESORES WHERE ID_PROFESOR=@ID_PROFESOR)

		PRINT 'EL NOMBRE DEL PROFESOR ES ' + @NOMBRE_PROFESOR + ' ' + ' Y SU SALARIO NETO ES ' + CAST(@SALARIO_NETO AS VARCHAR)
	END
GO
/*DECLARE @ID_PROFESOR VARCHAR(20)
SET @ID_PROFESOR= 118070444 --Este es un profesor que NO trabajo horas extra
EXECUTE [dbo].[PAGOS_DE_LOS_PROFESORES_SIN_HORAS_EXTRA]
@ID_PROFESOR OUT 

select * from HORAS_LABORADAS_PROFESORES*/
------------------------------------------------------------------------------------------------------------------------------------------------